### YamlMime:UniversalReference
ms.openlocfilehash: bed954b4ad093b9d7b51214336247d9673cd8b5a
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 08/12/2018
ms.locfileid: "40060944"
items:
- uid: azure-cognitiveservices-face.Face
  name: Face
  fullName: Face
  children:
  - azure-cognitiveservices-face.Face.detect
  - azure-cognitiveservices-face.Face.detect_1
  - azure-cognitiveservices-face.Face.detect_2
  - azure-cognitiveservices-face.Face.detectInStream_1
  - azure-cognitiveservices-face.Face.detectInStream_2
  - azure-cognitiveservices-face.Face.detectInStream
  - azure-cognitiveservices-face.Face.detectInStreamWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.detectWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.findSimilar
  - azure-cognitiveservices-face.Face.findSimilar_1
  - azure-cognitiveservices-face.Face.findSimilar_2
  - azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.group
  - azure-cognitiveservices-face.Face.group_1
  - azure-cognitiveservices-face.Face.group_2
  - azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.identify_1
  - azure-cognitiveservices-face.Face.identify_2
  - azure-cognitiveservices-face.Face.identify
  - azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verify
  - azure-cognitiveservices-face.Face.verify_1
  - azure-cognitiveservices-face.Face.verify_2
  - azure-cognitiveservices-face.Face.verifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup_1
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup_2
  - azure-cognitiveservices-face.Face.verifyWithPersonGroupWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-101">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="c4ade-101">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, options?: function)'
    parameters:
    - id: url
      type:
      - string
      description: "\n"
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect_1
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-102">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="c4ade-102">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect_2
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-103">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="c4ade-103">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, options: function, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream_1
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-104">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="c4ade-104">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream_2
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-105">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="c4ade-105">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, options: function, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-106">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="c4ade-106">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, options?: function)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="c4ade-107">Un flux d’image.</span><span class="sxs-lookup"><span data-stu-id="c4ade-107">An image stream.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStreamWithHttpOperationResponse
  name: detectInStreamWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-108">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="c4ade-108">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStreamWithHttpOperationResponse(image: stream.Readable, options?: function)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="c4ade-109">Un flux d’image.</span><span class="sxs-lookup"><span data-stu-id="c4ade-109">An image stream.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithHttpOperationResponse
  name: detectWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-110">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="c4ade-110">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithHttpOperationResponse(url: string, options?: function)'
    parameters:
    - id: url
      type:
      - string
      description: "\n"
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-111">Étant donné les faceId requête face, recherchez les visages similaires à partir d’un tableau faceId ou un faceListId.</span><span class="sxs-lookup"><span data-stu-id="c4ade-111">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options?: function)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-112">FaceId de la face de la requête.</span><span class="sxs-lookup"><span data-stu-id="c4ade-112">FaceId of the query face.</span></span> <span data-ttu-id="c4ade-113">Utilisateur doit appeler Face : détecter la première pour obtenir un faceId valide.</span><span class="sxs-lookup"><span data-stu-id="c4ade-113">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="c4ade-114">Notez que cette faceId n’est pas persistant et expirera après l’appel de la détection des dernières 24 heures</span><span class="sxs-lookup"><span data-stu-id="c4ade-114">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_1
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-115">Étant donné les faceId requête face, recherchez les visages similaires à partir d’un tableau faceId ou un faceListId.</span><span class="sxs-lookup"><span data-stu-id="c4ade-115">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFaceResult[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_2
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-116">Étant donné les faceId requête face, recherchez les visages similaires à partir d’un tableau faceId ou un faceListId.</span><span class="sxs-lookup"><span data-stu-id="c4ade-116">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options: function, callback: ServiceCallback<SimilarFaceResult[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  name: findSimilarWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-117">Étant donné les faceId requête face, recherchez les visages similaires à partir d’un tableau faceId ou un faceListId.</span><span class="sxs-lookup"><span data-stu-id="c4ade-117">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilarWithHttpOperationResponse(faceId: string, options?: function)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-118">FaceId de la face de la requête.</span><span class="sxs-lookup"><span data-stu-id="c4ade-118">FaceId of the query face.</span></span> <span data-ttu-id="c4ade-119">Utilisateur doit appeler Face : détecter la première pour obtenir un faceId valide.</span><span class="sxs-lookup"><span data-stu-id="c4ade-119">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="c4ade-120">Notez que cette faceId n’est pas persistant et expirera après l’appel de la détection des dernières 24 heures</span><span class="sxs-lookup"><span data-stu-id="c4ade-120">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFaceResult[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-121">Diviser candidate visages en groupes en fonction de similarité de face.</span><span class="sxs-lookup"><span data-stu-id="c4ade-121">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options?: function)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="c4ade-122">Tableau de candidat faceId créé en Face : détecter.</span><span class="sxs-lookup"><span data-stu-id="c4ade-122">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="c4ade-123">La valeur maximale est 1 000 visages</span><span class="sxs-lookup"><span data-stu-id="c4ade-123">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_1
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-124">Diviser candidate visages en groupes en fonction de similarité de face.</span><span class="sxs-lookup"><span data-stu-id="c4ade-124">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResponse>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResponse>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_2
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-125">Diviser candidate visages en groupes en fonction de similarité de face.</span><span class="sxs-lookup"><span data-stu-id="c4ade-125">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options: function, callback: ServiceCallback<GroupResponse>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResponse>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  name: groupWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-126">Diviser candidate visages en groupes en fonction de similarité de face.</span><span class="sxs-lookup"><span data-stu-id="c4ade-126">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function groupWithHttpOperationResponse(faceIds: string[], options?: function)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="c4ade-127">Tableau de candidat faceId créé en Face : détecter.</span><span class="sxs-lookup"><span data-stu-id="c4ade-127">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="c4ade-128">La valeur maximale est 1 000 visages</span><span class="sxs-lookup"><span data-stu-id="c4ade-128">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResponse>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_1
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-129">Identifiez les visages inconnus à partir d’un groupe de personnes.</span><span class="sxs-lookup"><span data-stu-id="c4ade-129">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], callback: ServiceCallback<IdentifyResultItem[]>)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: ''
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_2
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-130">Identifiez les visages inconnus à partir d’un groupe de personnes.</span><span class="sxs-lookup"><span data-stu-id="c4ade-130">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], options: function, callback: ServiceCallback<IdentifyResultItem[]>)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: ''
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-131">Identifiez les visages inconnus à partir d’un groupe de personnes.</span><span class="sxs-lookup"><span data-stu-id="c4ade-131">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], options?: function)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-132">personGroupId du groupe cible personne, créé par PersonGroups.Create</span><span class="sxs-lookup"><span data-stu-id="c4ade-132">personGroupId of the target person group, created by PersonGroups.Create</span></span>
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="c4ade-133">Tableau de candidat faceId créé en Face : détecter.</span><span class="sxs-lookup"><span data-stu-id="c4ade-133">Array of candidate faceId created by Face - Detect.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  name: identifyWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-134">Identifiez les visages inconnus à partir d’un groupe de personnes.</span><span class="sxs-lookup"><span data-stu-id="c4ade-134">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identifyWithHttpOperationResponse(personGroupId: string, faceIds: string[], options?: function)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-135">personGroupId du groupe cible personne, créé par PersonGroups.Create</span><span class="sxs-lookup"><span data-stu-id="c4ade-135">personGroupId of the target person group, created by PersonGroups.Create</span></span>
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="c4ade-136">Tableau de candidat faceId créé en Face : détecter.</span><span class="sxs-lookup"><span data-stu-id="c4ade-136">Array of candidate faceId created by Face - Detect.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResultItem[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-137">Vérifiez si les deux visages appartiennent à une même personne, ou si un visage appartient à une personne.</span><span class="sxs-lookup"><span data-stu-id="c4ade-137">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, options?: function)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-138">faceId de la première face provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="c4ade-138">faceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-139">faceId de la deuxième face, provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="c4ade-139">faceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify_1
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-140">Vérifiez si les deux visages appartiennent à une même personne, ou si un visage appartient à une personne.</span><span class="sxs-lookup"><span data-stu-id="c4ade-140">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify_2
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-141">Vérifiez si les deux visages appartiennent à une même personne, ou si un visage appartient à une personne.</span><span class="sxs-lookup"><span data-stu-id="c4ade-141">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, options: function, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithHttpOperationResponse
  name: verifyWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-142">Vérifiez si les deux visages appartiennent à une même personne, ou si un visage appartient à une personne.</span><span class="sxs-lookup"><span data-stu-id="c4ade-142">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyWithHttpOperationResponse(faceId1: string, faceId2: string, options?: function)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-143">faceId de la première face provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="c4ade-143">faceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-144">faceId de la deuxième face, provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="c4ade-144">faceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-145">Vérifiez si les deux visages appartiennent à une même personne.</span><span class="sxs-lookup"><span data-stu-id="c4ade-145">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="c4ade-146">Compare une face Id avec un Id de la personne</span><span class="sxs-lookup"><span data-stu-id="c4ade-146">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, options?: function)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-147">faceId la face, provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="c4ade-147">faceId the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-148">Spécifiez une personne spécifique dans un groupe de personnes.</span><span class="sxs-lookup"><span data-stu-id="c4ade-148">Specify a certain person in a person group.</span></span>

        <span data-ttu-id="c4ade-149">personId est créé dans Persons.Create.</span><span class="sxs-lookup"><span data-stu-id="c4ade-149">personId is created in Persons.Create.</span></span>
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-150">À l’aide de personGroupId et personId existants pour une personne spécifiée un chargement rapide.</span><span class="sxs-lookup"><span data-stu-id="c4ade-150">Using existing personGroupId and personId for fast loading a specified person.</span></span> <span data-ttu-id="c4ade-151">personGroupId est créé dans Groups.Create de personne.</span><span class="sxs-lookup"><span data-stu-id="c4ade-151">personGroupId is created in Person Groups.Create.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup_1
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-152">Vérifiez si les deux visages appartiennent à une même personne.</span><span class="sxs-lookup"><span data-stu-id="c4ade-152">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="c4ade-153">Compare une face Id avec un Id de la personne</span><span class="sxs-lookup"><span data-stu-id="c4ade-153">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: personGroupId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup_2
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-154">Vérifiez si les deux visages appartiennent à une même personne.</span><span class="sxs-lookup"><span data-stu-id="c4ade-154">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="c4ade-155">Compare une face Id avec un Id de la personne</span><span class="sxs-lookup"><span data-stu-id="c4ade-155">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, options: function, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: personGroupId
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroupWithHttpOperationResponse
  name: verifyWithPersonGroupWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="c4ade-156">Vérifiez si les deux visages appartiennent à une même personne.</span><span class="sxs-lookup"><span data-stu-id="c4ade-156">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="c4ade-157">Compare une face Id avec un Id de la personne</span><span class="sxs-lookup"><span data-stu-id="c4ade-157">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroupWithHttpOperationResponse(faceId: string, personId: string, personGroupId: string, options?: function)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-158">faceId la face, provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="c4ade-158">faceId the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-159">Spécifiez une personne spécifique dans un groupe de personnes.</span><span class="sxs-lookup"><span data-stu-id="c4ade-159">Specify a certain person in a person group.</span></span>

        <span data-ttu-id="c4ade-160">personId est créé dans Persons.Create.</span><span class="sxs-lookup"><span data-stu-id="c4ade-160">personId is created in Persons.Create.</span></span>
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="c4ade-161">À l’aide de personGroupId et personId existants pour une personne spécifiée un chargement rapide.</span><span class="sxs-lookup"><span data-stu-id="c4ade-161">Using existing personGroupId and personId for fast loading a specified person.</span></span> <span data-ttu-id="c4ade-162">personGroupId est créé dans Groups.Create de personne.</span><span class="sxs-lookup"><span data-stu-id="c4ade-162">personGroupId is created in Person Groups.Create.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
references:
- uid: Promise<azure-cognitiveservices-face.DetectedFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFaceResult[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.GroupResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.GroupResponse>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResponse>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResultItem[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.VerifyResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.VerifyResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>>'
    fullName: '>>'
