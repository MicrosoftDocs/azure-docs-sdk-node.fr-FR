### YamlMime:UniversalReference
ms.openlocfilehash: 5b2dcbac70d3d42b4477c37100171c12991de94f
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52150924"
items:
- uid: azure-cognitiveservices-face.Face
  name: Face
  fullName: Face
  children:
  - azure-cognitiveservices-face.Face.detectWithStream
  - azure-cognitiveservices-face.Face.detectWithStream_2
  - azure-cognitiveservices-face.Face.detectWithStream_1
  - azure-cognitiveservices-face.Face.detectWithStreamWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.detectWithUrl
  - azure-cognitiveservices-face.Face.detectWithUrl_2
  - azure-cognitiveservices-face.Face.detectWithUrl_1
  - azure-cognitiveservices-face.Face.detectWithUrlWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.findSimilar
  - azure-cognitiveservices-face.Face.findSimilar_2
  - azure-cognitiveservices-face.Face.findSimilar_1
  - azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.group
  - azure-cognitiveservices-face.Face.group_2
  - azure-cognitiveservices-face.Face.group_1
  - azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.identify
  - azure-cognitiveservices-face.Face.identify_2
  - azure-cognitiveservices-face.Face.identify_1
  - azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyFaceToFace
  - azure-cognitiveservices-face.Face.verifyFaceToFace_2
  - azure-cognitiveservices-face.Face.verifyFaceToFace_1
  - azure-cognitiveservices-face.Face.verifyFaceToFaceWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyFaceToPerson
  - azure-cognitiveservices-face.Face.verifyFaceToPerson_2
  - azure-cognitiveservices-face.Face.verifyFaceToPerson_1
  - azure-cognitiveservices-face.Face.verifyFaceToPersonWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream
  name: detectWithStream(stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-101">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="f6623-101">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStream(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="f6623-102">Un flux d’image.</span><span class="sxs-lookup"><span data-stu-id="f6623-102">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream_2
  name: detectWithStream(stream.Readable, Object, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-103">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="f6623-103">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStream(image: stream.Readable, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream_1
  name: detectWithStream(stream.Readable, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-104">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="f6623-104">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStream(image: stream.Readable, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStreamWithHttpOperationResponse
  name: detectWithStreamWithHttpOperationResponse(stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-105">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="f6623-105">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStreamWithHttpOperationResponse(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="f6623-106">Un flux d’image.</span><span class="sxs-lookup"><span data-stu-id="f6623-106">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl
  name: detectWithUrl(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-107">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="f6623-107">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrl(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: >
        <span data-ttu-id="f6623-108">URL accessible publiquement d’une image</span><span class="sxs-lookup"><span data-stu-id="f6623-108">Publicly reachable URL of an image</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl_2
  name: detectWithUrl(string, Object, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-109">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="f6623-109">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrl(url: string, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl_1
  name: detectWithUrl(string, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-110">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="f6623-110">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrlWithHttpOperationResponse
  name: detectWithUrlWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-111">Détectez les visages humains dans une image et retourne des emplacements de visage et éventuellement avec faceIds, des points de repère et des attributs.</span><span class="sxs-lookup"><span data-stu-id="f6623-111">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrlWithHttpOperationResponse(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: >
        <span data-ttu-id="f6623-112">URL accessible publiquement d’une image</span><span class="sxs-lookup"><span data-stu-id="f6623-112">Publicly reachable URL of an image</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar
  name: findSimilar(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-113">Étant donné les faceId requête face, trouver les visages similaires à partir d’un tableau faceId, une liste de visage ou une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="f6623-113">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="f6623-114">FaceId de la face de la requête.</span><span class="sxs-lookup"><span data-stu-id="f6623-114">FaceId of the query face.</span></span> <span data-ttu-id="f6623-115">Utilisateur doit appeler Face : détecter la première pour obtenir un faceId valide.</span><span class="sxs-lookup"><span data-stu-id="f6623-115">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="f6623-116">Notez que cette faceId n’est pas persistant et expirera après l’appel de la détection des dernières 24 heures</span><span class="sxs-lookup"><span data-stu-id="f6623-116">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_2
  name: findSimilar(string, Object, ServiceCallback<SimilarFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-117">Étant donné les faceId requête face, trouver les visages similaires à partir d’un tableau faceId, une liste de visage ou une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="f6623-117">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options: Object, callback: ServiceCallback<SimilarFace[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_1
  name: findSimilar(string, ServiceCallback<SimilarFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-118">Étant donné les faceId requête face, trouver les visages similaires à partir d’un tableau faceId, une liste de visage ou une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="f6623-118">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  name: findSimilarWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-119">Étant donné les faceId requête face, trouver les visages similaires à partir d’un tableau faceId, une liste de visage ou une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="f6623-119">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilarWithHttpOperationResponse(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="f6623-120">FaceId de la face de la requête.</span><span class="sxs-lookup"><span data-stu-id="f6623-120">FaceId of the query face.</span></span> <span data-ttu-id="f6623-121">Utilisateur doit appeler Face : détecter la première pour obtenir un faceId valide.</span><span class="sxs-lookup"><span data-stu-id="f6623-121">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="f6623-122">Notez que cette faceId n’est pas persistant et expirera après l’appel de la détection des dernières 24 heures</span><span class="sxs-lookup"><span data-stu-id="f6623-122">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group
  name: group(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-123">Diviser candidate visages en groupes en fonction de similarité de face.</span><span class="sxs-lookup"><span data-stu-id="f6623-123">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="f6623-124">Tableau de candidat faceId créé en Face : détecter.</span><span class="sxs-lookup"><span data-stu-id="f6623-124">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="f6623-125">La valeur maximale est 1 000 visages</span><span class="sxs-lookup"><span data-stu-id="f6623-125">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_2
  name: group(string[], Object, ServiceCallback<GroupResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-126">Diviser candidate visages en groupes en fonction de similarité de face.</span><span class="sxs-lookup"><span data-stu-id="f6623-126">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options: Object, callback: ServiceCallback<GroupResult>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_1
  name: group(string[], ServiceCallback<GroupResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-127">Diviser candidate visages en groupes en fonction de similarité de face.</span><span class="sxs-lookup"><span data-stu-id="f6623-127">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  name: groupWithHttpOperationResponse(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-128">Diviser candidate visages en groupes en fonction de similarité de face.</span><span class="sxs-lookup"><span data-stu-id="f6623-128">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function groupWithHttpOperationResponse(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="f6623-129">Tableau de candidat faceId créé en Face : détecter.</span><span class="sxs-lookup"><span data-stu-id="f6623-129">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="f6623-130">La valeur maximale est 1 000 visages</span><span class="sxs-lookup"><span data-stu-id="f6623-130">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify
  name: identify(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-131">identification de 1-à-plusieurs pour rechercher les correspondances les plus proches de la face de personne de requête spécifique à partir d’un groupe de personnes ou d’un groupe de personne volumineux.</span><span class="sxs-lookup"><span data-stu-id="f6623-131">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identify(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="f6623-132">Tableau de requête est confrontée faceIds, créé par la Face : détecter.</span><span class="sxs-lookup"><span data-stu-id="f6623-132">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="f6623-133">Chacune des faces sont identifiées indépendamment.</span><span class="sxs-lookup"><span data-stu-id="f6623-133">Each of the faces are identified independently.</span></span> <span data-ttu-id="f6623-134">Le nombre de faceIds valide est comprise entre [1, 10].</span><span class="sxs-lookup"><span data-stu-id="f6623-134">The valid number of faceIds is between [1, 10].</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_2
  name: identify(string[], Object, ServiceCallback<IdentifyResult[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-135">identification de 1-à-plusieurs pour rechercher les correspondances les plus proches de la face de personne de requête spécifique à partir d’un groupe de personnes ou d’un groupe de personne volumineux.</span><span class="sxs-lookup"><span data-stu-id="f6623-135">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identify(faceIds: string[], options: Object, callback: ServiceCallback<IdentifyResult[]>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_1
  name: identify(string[], ServiceCallback<IdentifyResult[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-136">identification de 1-à-plusieurs pour rechercher les correspondances les plus proches de la face de personne de requête spécifique à partir d’un groupe de personnes ou d’un groupe de personne volumineux.</span><span class="sxs-lookup"><span data-stu-id="f6623-136">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  name: identifyWithHttpOperationResponse(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-137">identification de 1-à-plusieurs pour rechercher les correspondances les plus proches de la face de personne de requête spécifique à partir d’un groupe de personnes ou d’un groupe de personne volumineux.</span><span class="sxs-lookup"><span data-stu-id="f6623-137">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identifyWithHttpOperationResponse(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="f6623-138">Tableau de requête est confrontée faceIds, créé par la Face : détecter.</span><span class="sxs-lookup"><span data-stu-id="f6623-138">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="f6623-139">Chacune des faces sont identifiées indépendamment.</span><span class="sxs-lookup"><span data-stu-id="f6623-139">Each of the faces are identified independently.</span></span> <span data-ttu-id="f6623-140">Le nombre de faceIds valide est comprise entre [1, 10].</span><span class="sxs-lookup"><span data-stu-id="f6623-140">The valid number of faceIds is between [1, 10].</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResult[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace
  name: verifyFaceToFace(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-141">Vérifiez si les deux visages appartiennent à une même personne, ou si un visage appartient à une personne.</span><span class="sxs-lookup"><span data-stu-id="f6623-141">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="f6623-142">faceId de la première face provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="f6623-142">FaceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="f6623-143">faceId de la deuxième face, provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="f6623-143">FaceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace_2
  name: verifyFaceToFace(string, string, Object, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-144">Vérifiez si les deux visages appartiennent à une même personne, ou si un visage appartient à une personne.</span><span class="sxs-lookup"><span data-stu-id="f6623-144">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace_1
  name: verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-145">Vérifiez si les deux visages appartiennent à une même personne, ou si un visage appartient à une personne.</span><span class="sxs-lookup"><span data-stu-id="f6623-145">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFaceWithHttpOperationResponse
  name: verifyFaceToFaceWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-146">Vérifiez si les deux visages appartiennent à une même personne, ou si un visage appartient à une personne.</span><span class="sxs-lookup"><span data-stu-id="f6623-146">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFaceWithHttpOperationResponse(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="f6623-147">faceId de la première face provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="f6623-147">FaceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="f6623-148">faceId de la deuxième face, provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="f6623-148">FaceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson
  name: verifyFaceToPerson(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-149">Vérifiez si les deux visages appartiennent à une même personne.</span><span class="sxs-lookup"><span data-stu-id="f6623-149">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="f6623-150">Compare une face Id avec un Id de la personne</span><span class="sxs-lookup"><span data-stu-id="f6623-150">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="f6623-151">FaceId du visage, provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="f6623-151">FaceId of the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="f6623-152">Spécifiez une personne spécifique dans un groupe de personnes ou d’un groupe de personnes volumineux.</span><span class="sxs-lookup"><span data-stu-id="f6623-152">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="f6623-153">personId est créé dans le groupe de personnes personne : créez ou LargePersonGroup personne - créer.</span><span class="sxs-lookup"><span data-stu-id="f6623-153">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson_2
  name: verifyFaceToPerson(string, string, Object, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-154">Vérifiez si les deux visages appartiennent à une même personne.</span><span class="sxs-lookup"><span data-stu-id="f6623-154">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="f6623-155">Compare une face Id avec un Id de la personne</span><span class="sxs-lookup"><span data-stu-id="f6623-155">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson_1
  name: verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-156">Vérifiez si les deux visages appartiennent à une même personne.</span><span class="sxs-lookup"><span data-stu-id="f6623-156">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="f6623-157">Compare une face Id avec un Id de la personne</span><span class="sxs-lookup"><span data-stu-id="f6623-157">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPersonWithHttpOperationResponse
  name: verifyFaceToPersonWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="f6623-158">Vérifiez si les deux visages appartiennent à une même personne.</span><span class="sxs-lookup"><span data-stu-id="f6623-158">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="f6623-159">Compare une face Id avec un Id de la personne</span><span class="sxs-lookup"><span data-stu-id="f6623-159">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPersonWithHttpOperationResponse(faceId: string, personId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="f6623-160">FaceId du visage, provient de la Face : détecter</span><span class="sxs-lookup"><span data-stu-id="f6623-160">FaceId of the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="f6623-161">Spécifiez une personne spécifique dans un groupe de personnes ou d’un groupe de personnes volumineux.</span><span class="sxs-lookup"><span data-stu-id="f6623-161">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="f6623-162">personId est créé dans le groupe de personnes personne : créez ou LargePersonGroup personne - créer.</span><span class="sxs-lookup"><span data-stu-id="f6623-162">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
references:
- uid: Promise<azure-cognitiveservices-face.DetectedFace[]>
  name: DetectedFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
  name: DetectedFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  name: DetectedFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.SimilarFace[]>
  name: SimilarFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
  name: SimilarFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFace[]>>
  name: SimilarFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.GroupResult>
  name: GroupResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.GroupResult>
  name: GroupResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResult>>
  name: GroupResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.IdentifyResult[]>
  name: IdentifyResult[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
  name: IdentifyResult[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResult[]>>
  name: IdentifyResult[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.VerifyResult>
  name: VerifyResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.VerifyResult>
  name: VerifyResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  name: VerifyResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>>'
    fullName: '>>'
