### YamlMime:UniversalReference
ms.openlocfilehash: 145293f6ed7479b70bb9d3084353eda83a7bad33
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52038108"
items:
- uid: azure-cognitiveservices-face.LargeFaceListOperations
  name: LargeFaceListOperations
  fullName: LargeFaceListOperations
  children:
  - azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromStream
  - azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_2
  - azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_1
  - azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromStreamWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl
  - azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_2
  - azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_1
  - azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromUrlWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.create
  - azure-cognitiveservices-face.LargeFaceListOperations.create_2
  - azure-cognitiveservices-face.LargeFaceListOperations.create_1
  - azure-cognitiveservices-face.LargeFaceListOperations.createWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.deleteFace
  - azure-cognitiveservices-face.LargeFaceListOperations.deleteFace_2
  - azure-cognitiveservices-face.LargeFaceListOperations.deleteFace_1
  - azure-cognitiveservices-face.LargeFaceListOperations.deleteFaceWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.deleteMethod
  - azure-cognitiveservices-face.LargeFaceListOperations.deleteMethod_2
  - azure-cognitiveservices-face.LargeFaceListOperations.deleteMethod_1
  - azure-cognitiveservices-face.LargeFaceListOperations.deleteMethodWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.get
  - azure-cognitiveservices-face.LargeFaceListOperations.get_2
  - azure-cognitiveservices-face.LargeFaceListOperations.get_1
  - azure-cognitiveservices-face.LargeFaceListOperations.getFace
  - azure-cognitiveservices-face.LargeFaceListOperations.getFace_2
  - azure-cognitiveservices-face.LargeFaceListOperations.getFace_1
  - azure-cognitiveservices-face.LargeFaceListOperations.getFaceWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.getTrainingStatus
  - azure-cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_2
  - azure-cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_1
  - azure-cognitiveservices-face.LargeFaceListOperations.getTrainingStatusWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.getWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.list
  - azure-cognitiveservices-face.LargeFaceListOperations.list_2
  - azure-cognitiveservices-face.LargeFaceListOperations.list_1
  - azure-cognitiveservices-face.LargeFaceListOperations.listFaces
  - azure-cognitiveservices-face.LargeFaceListOperations.listFaces_2
  - azure-cognitiveservices-face.LargeFaceListOperations.listFaces_1
  - azure-cognitiveservices-face.LargeFaceListOperations.listFacesWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.listWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.train
  - azure-cognitiveservices-face.LargeFaceListOperations.train_2
  - azure-cognitiveservices-face.LargeFaceListOperations.train_1
  - azure-cognitiveservices-face.LargeFaceListOperations.trainWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.update
  - azure-cognitiveservices-face.LargeFaceListOperations.update_2
  - azure-cognitiveservices-face.LargeFaceListOperations.update_1
  - azure-cognitiveservices-face.LargeFaceListOperations.updateFace
  - azure-cognitiveservices-face.LargeFaceListOperations.updateFace_2
  - azure-cognitiveservices-face.LargeFaceListOperations.updateFace_1
  - azure-cognitiveservices-face.LargeFaceListOperations.updateFaceWithHttpOperationResponse
  - azure-cognitiveservices-face.LargeFaceListOperations.updateWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromStream
  name: addFaceFromStream(string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-101">Ajouter une face à une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-101">Add a face to a large face list.</span></span> <span data-ttu-id="be2ba-102">Le visage d’entrée est spécifié en tant qu’image avec un rectangle targetFace.</span><span class="sxs-lookup"><span data-stu-id="be2ba-102">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="be2ba-103">Elle retourne un persistedFaceId représentant la face ajoutée et persistedFaceId n’expirent pas.</span><span class="sxs-lookup"><span data-stu-id="be2ba-103">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromStream(largeFaceListId: string, image: stream.Readable, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-104">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-104">Id referencing a particular large face list.</span></span>
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="be2ba-105">Un flux d’image.</span><span class="sxs-lookup"><span data-stu-id="be2ba-105">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_2
  name: addFaceFromStream(string, stream.Readable, Object, ServiceCallback<PersistedFace>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-106">Ajouter une face à une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-106">Add a face to a large face list.</span></span> <span data-ttu-id="be2ba-107">Le visage d’entrée est spécifié en tant qu’image avec un rectangle targetFace.</span><span class="sxs-lookup"><span data-stu-id="be2ba-107">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="be2ba-108">Elle retourne un persistedFaceId représentant la face ajoutée et persistedFaceId n’expirent pas.</span><span class="sxs-lookup"><span data-stu-id="be2ba-108">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromStream(largeFaceListId: string, image: stream.Readable, options: Object, callback: ServiceCallback<PersistedFace>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFace>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_1
  name: addFaceFromStream(string, stream.Readable, ServiceCallback<PersistedFace>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-109">Ajouter une face à une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-109">Add a face to a large face list.</span></span> <span data-ttu-id="be2ba-110">Le visage d’entrée est spécifié en tant qu’image avec un rectangle targetFace.</span><span class="sxs-lookup"><span data-stu-id="be2ba-110">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="be2ba-111">Elle retourne un persistedFaceId représentant la face ajoutée et persistedFaceId n’expirent pas.</span><span class="sxs-lookup"><span data-stu-id="be2ba-111">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromStream(largeFaceListId: string, image: stream.Readable, callback: ServiceCallback<PersistedFace>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFace>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromStreamWithHttpOperationResponse
  name: addFaceFromStreamWithHttpOperationResponse(string, stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-112">Ajouter une face à une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-112">Add a face to a large face list.</span></span> <span data-ttu-id="be2ba-113">Le visage d’entrée est spécifié en tant qu’image avec un rectangle targetFace.</span><span class="sxs-lookup"><span data-stu-id="be2ba-113">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="be2ba-114">Elle retourne un persistedFaceId représentant la face ajoutée et persistedFaceId n’expirent pas.</span><span class="sxs-lookup"><span data-stu-id="be2ba-114">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromStreamWithHttpOperationResponse(largeFaceListId: string, image: stream.Readable, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-115">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-115">Id referencing a particular large face list.</span></span>
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="be2ba-116">Un flux d’image.</span><span class="sxs-lookup"><span data-stu-id="be2ba-116">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFace>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl
  name: addFaceFromUrl(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-117">Ajouter une face à une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-117">Add a face to a large face list.</span></span> <span data-ttu-id="be2ba-118">Le visage d’entrée est spécifié en tant qu’image avec un rectangle targetFace.</span><span class="sxs-lookup"><span data-stu-id="be2ba-118">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="be2ba-119">Elle retourne un persistedFaceId représentant la face ajoutée et persistedFaceId n’expirent pas.</span><span class="sxs-lookup"><span data-stu-id="be2ba-119">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromUrl(largeFaceListId: string, url: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-120">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-120">Id referencing a particular large face list.</span></span>
    - id: url
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-121">URL accessible publiquement d’une image</span><span class="sxs-lookup"><span data-stu-id="be2ba-121">Publicly reachable URL of an image</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_2
  name: addFaceFromUrl(string, string, Object, ServiceCallback<PersistedFace>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-122">Ajouter une face à une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-122">Add a face to a large face list.</span></span> <span data-ttu-id="be2ba-123">Le visage d’entrée est spécifié en tant qu’image avec un rectangle targetFace.</span><span class="sxs-lookup"><span data-stu-id="be2ba-123">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="be2ba-124">Elle retourne un persistedFaceId représentant la face ajoutée et persistedFaceId n’expirent pas.</span><span class="sxs-lookup"><span data-stu-id="be2ba-124">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromUrl(largeFaceListId: string, url: string, options: Object, callback: ServiceCallback<PersistedFace>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: url
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFace>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_1
  name: addFaceFromUrl(string, string, ServiceCallback<PersistedFace>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-125">Ajouter une face à une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-125">Add a face to a large face list.</span></span> <span data-ttu-id="be2ba-126">Le visage d’entrée est spécifié en tant qu’image avec un rectangle targetFace.</span><span class="sxs-lookup"><span data-stu-id="be2ba-126">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="be2ba-127">Elle retourne un persistedFaceId représentant la face ajoutée et persistedFaceId n’expirent pas.</span><span class="sxs-lookup"><span data-stu-id="be2ba-127">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromUrl(largeFaceListId: string, url: string, callback: ServiceCallback<PersistedFace>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: url
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFace>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.addFaceFromUrlWithHttpOperationResponse
  name: addFaceFromUrlWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-128">Ajouter une face à une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-128">Add a face to a large face list.</span></span> <span data-ttu-id="be2ba-129">Le visage d’entrée est spécifié en tant qu’image avec un rectangle targetFace.</span><span class="sxs-lookup"><span data-stu-id="be2ba-129">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="be2ba-130">Elle retourne un persistedFaceId représentant la face ajoutée et persistedFaceId n’expirent pas.</span><span class="sxs-lookup"><span data-stu-id="be2ba-130">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromUrlWithHttpOperationResponse(largeFaceListId: string, url: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-131">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-131">Id referencing a particular large face list.</span></span>
    - id: url
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-132">URL accessible publiquement d’une image</span><span class="sxs-lookup"><span data-stu-id="be2ba-132">Publicly reachable URL of an image</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFace>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.create
  name: create(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-133">Créer une liste vide face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-133">Create an empty large face list.</span></span> <span data-ttu-id="be2ba-134">Jusqu'à 64 visages de grandes listes sont autorisés à exister dans un seul abonnement.</span><span class="sxs-lookup"><span data-stu-id="be2ba-134">Up to 64 large face lists are allowed to exist in one subscription.</span></span>
  syntax:
    content: 'function create(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-135">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-135">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.create_2
  name: create(string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-136">Créer une liste vide face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-136">Create an empty large face list.</span></span> <span data-ttu-id="be2ba-137">Jusqu'à 64 visages de grandes listes sont autorisés à exister dans un seul abonnement.</span><span class="sxs-lookup"><span data-stu-id="be2ba-137">Up to 64 large face lists are allowed to exist in one subscription.</span></span>
  syntax:
    content: 'function create(largeFaceListId: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.create_1
  name: create(string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-138">Créer une liste vide face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-138">Create an empty large face list.</span></span> <span data-ttu-id="be2ba-139">Jusqu'à 64 visages de grandes listes sont autorisés à exister dans un seul abonnement.</span><span class="sxs-lookup"><span data-stu-id="be2ba-139">Up to 64 large face lists are allowed to exist in one subscription.</span></span>
  syntax:
    content: 'function create(largeFaceListId: string, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.createWithHttpOperationResponse
  name: createWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-140">Créer une liste vide face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-140">Create an empty large face list.</span></span> <span data-ttu-id="be2ba-141">Jusqu'à 64 visages de grandes listes sont autorisés à exister dans un seul abonnement.</span><span class="sxs-lookup"><span data-stu-id="be2ba-141">Up to 64 large face lists are allowed to exist in one subscription.</span></span>
  syntax:
    content: 'function createWithHttpOperationResponse(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-142">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-142">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.deleteFace
  name: deleteFace(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-143">Supprimer un visage existant d’une liste de visages de grande taille (donnée par un persisitedFaceId et un largeFaceListId).</span><span class="sxs-lookup"><span data-stu-id="be2ba-143">Delete an existing face from a large face list (given by a persisitedFaceId and a largeFaceListId).</span></span> <span data-ttu-id="be2ba-144">Image persistante lié à la face est également supprimé.</span><span class="sxs-lookup"><span data-stu-id="be2ba-144">Persisted image related to the face will also be deleted.</span></span>
  syntax:
    content: 'function deleteFace(largeFaceListId: string, persistedFaceId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-145">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-145">Id referencing a particular large face list.</span></span>
    - id: persistedFaceId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-146">ID faisant référence à un persistedFaceId particulier d’un visage existant.</span><span class="sxs-lookup"><span data-stu-id="be2ba-146">Id referencing a particular persistedFaceId of an existing face.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.deleteFace_2
  name: deleteFace(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-147">Supprimer un visage existant d’une liste de visages de grande taille (donnée par un persisitedFaceId et un largeFaceListId).</span><span class="sxs-lookup"><span data-stu-id="be2ba-147">Delete an existing face from a large face list (given by a persisitedFaceId and a largeFaceListId).</span></span> <span data-ttu-id="be2ba-148">Image persistante lié à la face est également supprimé.</span><span class="sxs-lookup"><span data-stu-id="be2ba-148">Persisted image related to the face will also be deleted.</span></span>
  syntax:
    content: 'function deleteFace(largeFaceListId: string, persistedFaceId: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: persistedFaceId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.deleteFace_1
  name: deleteFace(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-149">Supprimer un visage existant d’une liste de visages de grande taille (donnée par un persisitedFaceId et un largeFaceListId).</span><span class="sxs-lookup"><span data-stu-id="be2ba-149">Delete an existing face from a large face list (given by a persisitedFaceId and a largeFaceListId).</span></span> <span data-ttu-id="be2ba-150">Image persistante lié à la face est également supprimé.</span><span class="sxs-lookup"><span data-stu-id="be2ba-150">Persisted image related to the face will also be deleted.</span></span>
  syntax:
    content: 'function deleteFace(largeFaceListId: string, persistedFaceId: string, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: persistedFaceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.deleteFaceWithHttpOperationResponse
  name: deleteFaceWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-151">Supprimer un visage existant d’une liste de visages de grande taille (donnée par un persisitedFaceId et un largeFaceListId).</span><span class="sxs-lookup"><span data-stu-id="be2ba-151">Delete an existing face from a large face list (given by a persisitedFaceId and a largeFaceListId).</span></span> <span data-ttu-id="be2ba-152">Image persistante lié à la face est également supprimé.</span><span class="sxs-lookup"><span data-stu-id="be2ba-152">Persisted image related to the face will also be deleted.</span></span>
  syntax:
    content: 'function deleteFaceWithHttpOperationResponse(largeFaceListId: string, persistedFaceId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-153">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-153">Id referencing a particular large face list.</span></span>
    - id: persistedFaceId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-154">ID faisant référence à un persistedFaceId particulier d’un visage existant.</span><span class="sxs-lookup"><span data-stu-id="be2ba-154">Id referencing a particular persistedFaceId of an existing face.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.deleteMethod
  name: deleteMethod(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-155">Supprimer une liste de grandes face existante en fonction de faceListId.</span><span class="sxs-lookup"><span data-stu-id="be2ba-155">Delete an existing large face list according to faceListId.</span></span> <span data-ttu-id="be2ba-156">Conservées face images dans la liste de visages de grande taille seront également supprimées.</span><span class="sxs-lookup"><span data-stu-id="be2ba-156">Persisted face images in the large face list will also be deleted.</span></span>
  syntax:
    content: 'function deleteMethod(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-157">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-157">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.deleteMethod_2
  name: deleteMethod(string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-158">Supprimer une liste de grandes face existante en fonction de faceListId.</span><span class="sxs-lookup"><span data-stu-id="be2ba-158">Delete an existing large face list according to faceListId.</span></span> <span data-ttu-id="be2ba-159">Conservées face images dans la liste de visages de grande taille seront également supprimées.</span><span class="sxs-lookup"><span data-stu-id="be2ba-159">Persisted face images in the large face list will also be deleted.</span></span>
  syntax:
    content: 'function deleteMethod(largeFaceListId: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.deleteMethod_1
  name: deleteMethod(string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-160">Supprimer une liste de grandes face existante en fonction de faceListId.</span><span class="sxs-lookup"><span data-stu-id="be2ba-160">Delete an existing large face list according to faceListId.</span></span> <span data-ttu-id="be2ba-161">Conservées face images dans la liste de visages de grande taille seront également supprimées.</span><span class="sxs-lookup"><span data-stu-id="be2ba-161">Persisted face images in the large face list will also be deleted.</span></span>
  syntax:
    content: 'function deleteMethod(largeFaceListId: string, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.deleteMethodWithHttpOperationResponse
  name: deleteMethodWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-162">Supprimer une liste de grandes face existante en fonction de faceListId.</span><span class="sxs-lookup"><span data-stu-id="be2ba-162">Delete an existing large face list according to faceListId.</span></span> <span data-ttu-id="be2ba-163">Conservées face images dans la liste de visages de grande taille seront également supprimées.</span><span class="sxs-lookup"><span data-stu-id="be2ba-163">Persisted face images in the large face list will also be deleted.</span></span>
  syntax:
    content: 'function deleteMethodWithHttpOperationResponse(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-164">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-164">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.get
  name: get(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-165">Récupérer les informations d’une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-165">Retrieve a large face list's information.</span></span>
  syntax:
    content: 'function get(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-166">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-166">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.LargeFaceList>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.get_2
  name: get(string, Object, ServiceCallback<LargeFaceList>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-167">Récupérer les informations d’une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-167">Retrieve a large face list's information.</span></span>
  syntax:
    content: 'function get(largeFaceListId: string, options: Object, callback: ServiceCallback<LargeFaceList>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.LargeFaceList>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.LargeFaceList>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.get_1
  name: get(string, ServiceCallback<LargeFaceList>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-168">Récupérer les informations d’une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-168">Retrieve a large face list's information.</span></span>
  syntax:
    content: 'function get(largeFaceListId: string, callback: ServiceCallback<LargeFaceList>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.LargeFaceList>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.LargeFaceList>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.getFace
  name: getFace(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-169">Récupérer des informations sur une face persistante (spécifiée par persistedFaceId et son largeFaceListId appartenant).</span><span class="sxs-lookup"><span data-stu-id="be2ba-169">Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).</span></span>
  syntax:
    content: 'function getFace(largeFaceListId: string, persistedFaceId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-170">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-170">Id referencing a particular large face list.</span></span>
    - id: persistedFaceId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-171">ID faisant référence à un persistedFaceId particulier d’un visage existant.</span><span class="sxs-lookup"><span data-stu-id="be2ba-171">Id referencing a particular persistedFaceId of an existing face.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.getFace_2
  name: getFace(string, string, Object, ServiceCallback<PersistedFace>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-172">Récupérer des informations sur une face persistante (spécifiée par persistedFaceId et son largeFaceListId appartenant).</span><span class="sxs-lookup"><span data-stu-id="be2ba-172">Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).</span></span>
  syntax:
    content: 'function getFace(largeFaceListId: string, persistedFaceId: string, options: Object, callback: ServiceCallback<PersistedFace>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: persistedFaceId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFace>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.getFace_1
  name: getFace(string, string, ServiceCallback<PersistedFace>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-173">Récupérer des informations sur une face persistante (spécifiée par persistedFaceId et son largeFaceListId appartenant).</span><span class="sxs-lookup"><span data-stu-id="be2ba-173">Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).</span></span>
  syntax:
    content: 'function getFace(largeFaceListId: string, persistedFaceId: string, callback: ServiceCallback<PersistedFace>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: persistedFaceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFace>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.getFaceWithHttpOperationResponse
  name: getFaceWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-174">Récupérer des informations sur une face persistante (spécifiée par persistedFaceId et son largeFaceListId appartenant).</span><span class="sxs-lookup"><span data-stu-id="be2ba-174">Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).</span></span>
  syntax:
    content: 'function getFaceWithHttpOperationResponse(largeFaceListId: string, persistedFaceId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-175">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-175">Id referencing a particular large face list.</span></span>
    - id: persistedFaceId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-176">ID faisant référence à un persistedFaceId particulier d’un visage existant.</span><span class="sxs-lookup"><span data-stu-id="be2ba-176">Id referencing a particular persistedFaceId of an existing face.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFace>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.getTrainingStatus
  name: getTrainingStatus(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-177">Récupérer l’état de la formation d’une liste de visages de grande taille (terminée ou en cours).</span><span class="sxs-lookup"><span data-stu-id="be2ba-177">Retrieve the training status of a large face list (completed or ongoing).</span></span>
  syntax:
    content: 'function getTrainingStatus(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-178">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-178">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.TrainingStatus>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_2
  name: getTrainingStatus(string, Object, ServiceCallback<TrainingStatus>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-179">Récupérer l’état de la formation d’une liste de visages de grande taille (terminée ou en cours).</span><span class="sxs-lookup"><span data-stu-id="be2ba-179">Retrieve the training status of a large face list (completed or ongoing).</span></span>
  syntax:
    content: 'function getTrainingStatus(largeFaceListId: string, options: Object, callback: ServiceCallback<TrainingStatus>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.TrainingStatus>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_1
  name: getTrainingStatus(string, ServiceCallback<TrainingStatus>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-180">Récupérer l’état de la formation d’une liste de visages de grande taille (terminée ou en cours).</span><span class="sxs-lookup"><span data-stu-id="be2ba-180">Retrieve the training status of a large face list (completed or ongoing).</span></span>
  syntax:
    content: 'function getTrainingStatus(largeFaceListId: string, callback: ServiceCallback<TrainingStatus>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.TrainingStatus>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.getTrainingStatusWithHttpOperationResponse
  name: getTrainingStatusWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-181">Récupérer l’état de la formation d’une liste de visages de grande taille (terminée ou en cours).</span><span class="sxs-lookup"><span data-stu-id="be2ba-181">Retrieve the training status of a large face list (completed or ongoing).</span></span>
  syntax:
    content: 'function getTrainingStatusWithHttpOperationResponse(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-182">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-182">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.TrainingStatus>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.getWithHttpOperationResponse
  name: getWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-183">Récupérer les informations d’une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-183">Retrieve a large face list's information.</span></span>
  syntax:
    content: 'function getWithHttpOperationResponse(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-184">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-184">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.LargeFaceList>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.list
  name: list(Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-185">Récupérer des informations sur toutes les listes de visages de grande taille existant.</span><span class="sxs-lookup"><span data-stu-id="be2ba-185">Retrieve information about all existing large face lists.</span></span> <span data-ttu-id="be2ba-186">Seront affichera uniquement largeFaceListId, nom et userData.</span><span class="sxs-lookup"><span data-stu-id="be2ba-186">Only largeFaceListId, name and userData will be returned.</span></span>
  syntax:
    content: 'function list(options?: Object)'
    parameters:
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.LargeFaceList[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.list_2
  name: list(Object, ServiceCallback<LargeFaceList[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-187">Récupérer des informations sur toutes les listes de visages de grande taille existant.</span><span class="sxs-lookup"><span data-stu-id="be2ba-187">Retrieve information about all existing large face lists.</span></span> <span data-ttu-id="be2ba-188">Seront affichera uniquement largeFaceListId, nom et userData.</span><span class="sxs-lookup"><span data-stu-id="be2ba-188">Only largeFaceListId, name and userData will be returned.</span></span>
  syntax:
    content: 'function list(options: Object, callback: ServiceCallback<LargeFaceList[]>)'
    parameters:
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.LargeFaceList[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.LargeFaceList[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.list_1
  name: list(ServiceCallback<LargeFaceList[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-189">Récupérer des informations sur toutes les listes de visages de grande taille existant.</span><span class="sxs-lookup"><span data-stu-id="be2ba-189">Retrieve information about all existing large face lists.</span></span> <span data-ttu-id="be2ba-190">Seront affichera uniquement largeFaceListId, nom et userData.</span><span class="sxs-lookup"><span data-stu-id="be2ba-190">Only largeFaceListId, name and userData will be returned.</span></span>
  syntax:
    content: 'function list(callback: ServiceCallback<LargeFaceList[]>)'
    parameters:
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.LargeFaceList[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.LargeFaceList[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.listFaces
  name: listFaces(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-191">Liste de tous les visages dans une liste de visages de grande taille et récupérer des informations de face (y compris userData et persistedFaceIds des faces inscrits du visage).</span><span class="sxs-lookup"><span data-stu-id="be2ba-191">List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).</span></span>
  syntax:
    content: 'function listFaces(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-192">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-192">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.listFaces_2
  name: listFaces(string, Object, ServiceCallback<PersistedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-193">Liste de tous les visages dans une liste de visages de grande taille et récupérer des informations de face (y compris userData et persistedFaceIds des faces inscrits du visage).</span><span class="sxs-lookup"><span data-stu-id="be2ba-193">List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).</span></span>
  syntax:
    content: 'function listFaces(largeFaceListId: string, options: Object, callback: ServiceCallback<PersistedFace[]>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.listFaces_1
  name: listFaces(string, ServiceCallback<PersistedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-194">Liste de tous les visages dans une liste de visages de grande taille et récupérer des informations de face (y compris userData et persistedFaceIds des faces inscrits du visage).</span><span class="sxs-lookup"><span data-stu-id="be2ba-194">List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).</span></span>
  syntax:
    content: 'function listFaces(largeFaceListId: string, callback: ServiceCallback<PersistedFace[]>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.listFacesWithHttpOperationResponse
  name: listFacesWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-195">Liste de tous les visages dans une liste de visages de grande taille et récupérer des informations de face (y compris userData et persistedFaceIds des faces inscrits du visage).</span><span class="sxs-lookup"><span data-stu-id="be2ba-195">List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).</span></span>
  syntax:
    content: 'function listFacesWithHttpOperationResponse(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-196">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-196">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.listWithHttpOperationResponse
  name: listWithHttpOperationResponse(Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-197">Récupérer des informations sur toutes les listes de visages de grande taille existant.</span><span class="sxs-lookup"><span data-stu-id="be2ba-197">Retrieve information about all existing large face lists.</span></span> <span data-ttu-id="be2ba-198">Seront affichera uniquement largeFaceListId, nom et userData.</span><span class="sxs-lookup"><span data-stu-id="be2ba-198">Only largeFaceListId, name and userData will be returned.</span></span>
  syntax:
    content: 'function listWithHttpOperationResponse(options?: Object)'
    parameters:
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.LargeFaceList[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.train
  name: train(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-199">File d’attente d’une tâche de formation de liste face volumineux, la tâche de formation ne peut pas être démarrée immédiatement.</span><span class="sxs-lookup"><span data-stu-id="be2ba-199">Queue a large face list training task, the training task may not be started immediately.</span></span>
  syntax:
    content: 'function train(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-200">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-200">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.train_2
  name: train(string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-201">File d’attente d’une tâche de formation de liste face volumineux, la tâche de formation ne peut pas être démarrée immédiatement.</span><span class="sxs-lookup"><span data-stu-id="be2ba-201">Queue a large face list training task, the training task may not be started immediately.</span></span>
  syntax:
    content: 'function train(largeFaceListId: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.train_1
  name: train(string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-202">File d’attente d’une tâche de formation de liste face volumineux, la tâche de formation ne peut pas être démarrée immédiatement.</span><span class="sxs-lookup"><span data-stu-id="be2ba-202">Queue a large face list training task, the training task may not be started immediately.</span></span>
  syntax:
    content: 'function train(largeFaceListId: string, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.trainWithHttpOperationResponse
  name: trainWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-203">File d’attente d’une tâche de formation de liste face volumineux, la tâche de formation ne peut pas être démarrée immédiatement.</span><span class="sxs-lookup"><span data-stu-id="be2ba-203">Queue a large face list training task, the training task may not be started immediately.</span></span>
  syntax:
    content: 'function trainWithHttpOperationResponse(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-204">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-204">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.update
  name: update(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-205">Mettre à jour les informations d’une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-205">Update information of a large face list.</span></span>
  syntax:
    content: 'function update(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-206">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-206">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.update_2
  name: update(string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-207">Mettre à jour les informations d’une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-207">Update information of a large face list.</span></span>
  syntax:
    content: 'function update(largeFaceListId: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.update_1
  name: update(string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-208">Mettre à jour les informations d’une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-208">Update information of a large face list.</span></span>
  syntax:
    content: 'function update(largeFaceListId: string, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.updateFace
  name: updateFace(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-209">Mettre à jour de champ d’userData un persistantes face.</span><span class="sxs-lookup"><span data-stu-id="be2ba-209">Update a persisted face's userData field.</span></span>
  syntax:
    content: 'function updateFace(largeFaceListId: string, persistedFaceId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-210">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-210">Id referencing a particular large face list.</span></span>
    - id: persistedFaceId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-211">ID faisant référence à un persistedFaceId particulier d’un visage existant.</span><span class="sxs-lookup"><span data-stu-id="be2ba-211">Id referencing a particular persistedFaceId of an existing face.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.updateFace_2
  name: updateFace(string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-212">Mettre à jour de champ d’userData un persistantes face.</span><span class="sxs-lookup"><span data-stu-id="be2ba-212">Update a persisted face's userData field.</span></span>
  syntax:
    content: 'function updateFace(largeFaceListId: string, persistedFaceId: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: persistedFaceId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.updateFace_1
  name: updateFace(string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-213">Mettre à jour de champ d’userData un persistantes face.</span><span class="sxs-lookup"><span data-stu-id="be2ba-213">Update a persisted face's userData field.</span></span>
  syntax:
    content: 'function updateFace(largeFaceListId: string, persistedFaceId: string, callback: ServiceCallback<void>)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: ''
    - id: persistedFaceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.updateFaceWithHttpOperationResponse
  name: updateFaceWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-214">Mettre à jour de champ d’userData un persistantes face.</span><span class="sxs-lookup"><span data-stu-id="be2ba-214">Update a persisted face's userData field.</span></span>
  syntax:
    content: 'function updateFaceWithHttpOperationResponse(largeFaceListId: string, persistedFaceId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-215">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-215">Id referencing a particular large face list.</span></span>
    - id: persistedFaceId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-216">ID faisant référence à un persistedFaceId particulier d’un visage existant.</span><span class="sxs-lookup"><span data-stu-id="be2ba-216">Id referencing a particular persistedFaceId of an existing face.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.LargeFaceListOperations.updateWithHttpOperationResponse
  name: updateWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="be2ba-217">Mettre à jour les informations d’une liste de visages de grande taille.</span><span class="sxs-lookup"><span data-stu-id="be2ba-217">Update information of a large face list.</span></span>
  syntax:
    content: 'function updateWithHttpOperationResponse(largeFaceListId: string, options?: Object)'
    parameters:
    - id: largeFaceListId
      type:
      - string
      description: >
        <span data-ttu-id="be2ba-218">ID de référence à une liste particulière face volumineux.</span><span class="sxs-lookup"><span data-stu-id="be2ba-218">Id referencing a particular large face list.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-cognitiveservices-face
references:
- uid: Promise<azure-cognitiveservices-face.PersistedFace>
  name: PersistedFace>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: PersistedFace
    fullName: PersistedFace
    uid: azure-cognitiveservices-face.PersistedFace
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.PersistedFace>
  name: PersistedFace>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: PersistedFace
    fullName: PersistedFace
    uid: azure-cognitiveservices-face.PersistedFace
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFace>>
  name: PersistedFace>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: PersistedFace
    fullName: PersistedFace
    uid: azure-cognitiveservices-face.PersistedFace
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.LargeFaceList>
  name: LargeFaceList>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: LargeFaceList
    fullName: LargeFaceList
    uid: azure-cognitiveservices-face.LargeFaceList
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.LargeFaceList>
  name: LargeFaceList>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: LargeFaceList
    fullName: LargeFaceList
    uid: azure-cognitiveservices-face.LargeFaceList
  - name: '>'
    fullName: '>'
- uid: Promise<azure-cognitiveservices-face.TrainingStatus>
  name: TrainingStatus>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: TrainingStatus
    fullName: TrainingStatus
    uid: azure-cognitiveservices-face.TrainingStatus
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
  name: TrainingStatus>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: TrainingStatus
    fullName: TrainingStatus
    uid: azure-cognitiveservices-face.TrainingStatus
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.TrainingStatus>>
  name: TrainingStatus>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: TrainingStatus
    fullName: TrainingStatus
    uid: azure-cognitiveservices-face.TrainingStatus
  - name: '>>'
    fullName: '>>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.LargeFaceList>>
  name: LargeFaceList>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: LargeFaceList
    fullName: LargeFaceList
    uid: azure-cognitiveservices-face.LargeFaceList
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.LargeFaceList[]>
  name: LargeFaceList[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: LargeFaceList
    fullName: LargeFaceList
    uid: azure-cognitiveservices-face.LargeFaceList
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.LargeFaceList[]>
  name: LargeFaceList[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: LargeFaceList
    fullName: LargeFaceList
    uid: azure-cognitiveservices-face.LargeFaceList
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<azure-cognitiveservices-face.PersistedFace[]>
  name: PersistedFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: PersistedFace
    fullName: PersistedFace
    uid: azure-cognitiveservices-face.PersistedFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.PersistedFace[]>
  name: PersistedFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: PersistedFace
    fullName: PersistedFace
    uid: azure-cognitiveservices-face.PersistedFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFace[]>>
  name: PersistedFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: PersistedFace
    fullName: PersistedFace
    uid: azure-cognitiveservices-face.PersistedFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.LargeFaceList[]>>
  name: LargeFaceList[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: LargeFaceList
    fullName: LargeFaceList
    uid: azure-cognitiveservices-face.LargeFaceList
  - name: '[]>>'
    fullName: '[]>>'
