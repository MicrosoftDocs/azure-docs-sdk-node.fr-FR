### YamlMime:UniversalReference
ms.openlocfilehash: e46a5a038ac1b40706d5d7c5d49f04bec86c3f84
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 08/12/2018
ms.locfileid: "40060584"
items:
- uid: azure-event-hubs.EventHubClient
  name: EventHubClient
  fullName: EventHubClient
  children:
  - azure-event-hubs.EventHubClient.close
  - azure-event-hubs.EventHubClient.connectionId
  - azure-event-hubs.EventHubClient.createFromAadTokenCredentials
  - azure-event-hubs.EventHubClient.createFromConnectionString
  - azure-event-hubs.EventHubClient.createFromIotHubConnectionString
  - azure-event-hubs.EventHubClient.constructor
  - azure-event-hubs.EventHubClient.getHubRuntimeInformation
  - azure-event-hubs.EventHubClient.getPartitionIds
  - azure-event-hubs.EventHubClient.getPartitionInformation
  - azure-event-hubs.EventHubClient.receive
  - azure-event-hubs.EventHubClient.receiveBatch
  - azure-event-hubs.EventHubClient.send
  - azure-event-hubs.EventHubClient.sendBatch
  langs:
  - typeScript
  type: class
  summary: ''
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.close
  name: close
  children: []
  type: method
  langs:
  - typeScript
  summary: Ferme la connexion AMQP au Hub d’événements pour ce client, retourner une promesse qui sera résolue lors de la déconnexion est terminée.
  syntax:
    content: function close()
    parameters: []
    return:
      type:
      - Promise<void>
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.connectionId
  name: connectionId
  fullName: connectionId
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  optional: true
  syntax:
    content: 'connectionId?: string'
    return:
      type:
      - string
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.createFromAadTokenCredentials
  name: createFromAadTokenCredentials
  children: []
  type: method
  langs:
  - typeScript
  summary: Crée un Client EventHub à partir de AADTokenCredentials.
  syntax:
    content: 'static function createFromAadTokenCredentials(host: string, entityPath: string, credentials: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, options?: ClientOptionsBase)'
    parameters:
    - id: host
      type:
      - string
      description: Nom de domaine complet pour Event Hubs. Vraisemblablement, {yournamespace}. servicebus.windows .net
    - id: entityPath
      type:
      - string
      description: Chemin d’accès de l’EventHub sous la forme « mon-événements-hub-nom »
    - id: credentials
      type:
      - ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials
      description: 'Les informations d’identification du jeton AAD. Il peut prendre l’une des opérations suivantes : ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.'
    - id: options
      type:
      - azure-event-hubs.ClientOptionsBase
      description: Les options qui peuvent être fournies lors de la création du client.
      optional: true
    return:
      type:
      - azure-event-hubs.EventHubClient
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.createFromConnectionString
  name: createFromConnectionString
  children: []
  type: method
  langs:
  - typeScript
  summary: Crée un EventHub Client à partir de la chaîne de connexion.
  syntax:
    content: 'static function createFromConnectionString(connectionString: string, path?: string, options?: ClientOptions)'
    parameters:
    - id: connectionString
      type:
      - string
      description: Chaîne de connexion sous la forme « Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/ ; SharedAccessKeyName = my-SA-name ; SharedAccessKey = my-SA-key'
    - id: path
      type:
      - string
      description: ''
      optional: true
    - id: options
      type:
      - azure-event-hubs.ClientOptions
      description: ''
      optional: true
    return:
      type:
      - azure-event-hubs.EventHubClient
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.createFromIotHubConnectionString
  name: createFromIotHubConnectionString
  children: []
  type: method
  langs:
  - typeScript
  summary: Crée un EventHub Client à partir de la chaîne de connexion.
  syntax:
    content: 'static function createFromIotHubConnectionString(iothubConnectionString: string, options?: ClientOptions)'
    parameters:
    - id: iothubConnectionString
      type:
      - string
      description: Chaîne de connexion sous la forme « nom d’hôte = iot-nom d’hôte ; SharedAccessKeyName = my-SA-name ; SharedAccessKey = my-SA-key'
    - id: options
      type:
      - azure-event-hubs.ClientOptions
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-event-hubs.EventHubClient>
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.constructor
  name: EventHubClient
  children: []
  type: constructor
  langs:
  - typeScript
  summary: Instancie un client qui pointe vers le concentrateur d’événements donné par cette configuration.
  syntax:
    content: 'new EventHubClient(config: ConnectionConfig, options?: ClientOptions)'
    parameters:
    - id: config
      type:
      - azure-event-hubs.ConnectionConfig
      description: La configuration de la connexion pour créer le EventHub Client.
    - id: options
      type:
      - azure-event-hubs.ClientOptions
      description: >
        Les paramètres facultatifs qui peuvent être fournies au constructeur Client de EventHub.
      optional: true
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.getHubRuntimeInformation
  name: getHubRuntimeInformation
  children: []
  type: method
  langs:
  - typeScript
  summary: Fournit les informations de runtime eventhub.
  syntax:
    content: function getHubRuntimeInformation()
    parameters: []
    return:
      type:
      - Promise<azure-event-hubs.EventHubRuntimeInformation>
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.getPartitionIds
  name: getPartitionIds
  children: []
  type: method
  langs:
  - typeScript
  summary: Fournit un tableau de partitionIds.
  syntax:
    content: function getPartitionIds()
    parameters: []
    return:
      type:
      - Promise<Array<string>>
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.getPartitionInformation
  name: getPartitionInformation
  children: []
  type: method
  langs:
  - typeScript
  summary: Fournit des informations sur la partition spécifiée.
  syntax:
    content: 'function getPartitionInformation(partitionId: string | number)'
    parameters:
    - id: partitionId
      type:
      - string | number
      description: ID de partition pour la partition dans laquelle les informations sont requises.
    return:
      type:
      - Promise<azure-event-hubs.EventHubPartitionRuntimeInformation>
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.receive
  name: receive
  children: []
  type: method
  langs:
  - typeScript
  summary: Démarre le récepteur en établissant une session AMQP et un lien du récepteur AMQP sur la session. Messages seront passés au gestionnaire onMessage fourni et erreur est passée au gestionnaire onError fourni.
  syntax:
    content: 'function receive(partitionId: string | number, onMessage: OnMessage, onError: OnError, options?: ReceiveOptions)'
    parameters:
    - id: partitionId
      type:
      - string | number
      description: ID de partition de réception.
    - id: onMessage
      type:
      - azure-event-hubs.OnMessage
      description: Le Gestionnaire de messages pour recevoir des objets de données d’événement.
    - id: onError
      type:
      - azure-event-hubs.OnError
      description: Le Gestionnaire d’erreurs pour recevoir une erreur se produit lors de la réception des messages.
    - id: options
      type:
      - azure-event-hubs.ReceiveOptions
      description: ''
      optional: true
    return:
      type:
      - azure-event-hubs.ReceiveHandler
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.receiveBatch
  name: receiveBatch
  children: []
  type: method
  langs:
  - typeScript
  summary: Reçoit un lot d’objets EventData à partir d’une partition EventHub pour un nombre donné et un maximum de donnée temps d’attente en secondes, selon ce qui se produit en premier. Cette méthode peut être utilisée directement après la création de l’objet de récepteur et **ne doit pas** être utilisé avec le `start()` (méthode).
  syntax:
    content: 'function receiveBatch(partitionId: string | number, maxMessageCount: number, maxWaitTimeInSeconds?: number, options?: ReceiveOptions)'
    parameters:
    - id: partitionId
      type:
      - string | number
      description: ID de partition de réception.
    - id: maxMessageCount
      type:
      - number
      description: Le nombre maximal de messages. Doit être une valeur supérieure à 0.
    - id: maxWaitTimeInSeconds
      type:
      - number
      description: ''
      optional: true
    - id: options
      type:
      - azure-event-hubs.ReceiveOptions
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-event-hubs.EventData[]>
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.send
  name: send
  children: []
  type: method
  langs:
  - typeScript
  summary: Envoie le message donné à l’EventHub.
  syntax:
    content: 'function send(data: EventData, partitionId?: string | number)'
    parameters:
    - id: data
      type:
      - azure-event-hubs.EventData
      description: Message à envoyer.  Sera envoyé en tant que chaîne JSON encodée en UTF-8.
    - id: partitionId
      type:
      - string | number
      description: ''
      optional: true
    return:
      type:
      - Promise<Delivery>
  package: azure-event-hubs
- uid: azure-event-hubs.EventHubClient.sendBatch
  name: sendBatch
  children: []
  type: method
  langs:
  - typeScript
  summary: Envoyer un lot de EventData à l’EventHub. Le « message_annotations », « application_properties » et « propriétés » du premier message définira que celle de l’enveloppe (message de traitement par lot).
  syntax:
    content: 'function sendBatch(datas: EventData[], partitionId?: string | number)'
    parameters:
    - id: datas
      type:
      - azure-event-hubs.EventData[]
      description: Tableau d’objets EventData à envoyer dans un lot de messages.
    - id: partitionId
      type:
      - string | number
      description: ''
      optional: true
    return:
      type:
      - Promise<Delivery>
  package: azure-event-hubs
references:
- uid: azure-event-hubs.ConnectionConfig
  spec.typeScript:
  - name: ConnectionConfig
    fullName: ConnectionConfig
    uid: azure-event-hubs.ConnectionConfig
- uid: azure-event-hubs.ClientOptions
  spec.typeScript:
  - name: ClientOptions
    fullName: ClientOptions
    uid: azure-event-hubs.ClientOptions
- uid: Promise<azure-event-hubs.EventHubRuntimeInformation>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventHubRuntimeInformation
    fullName: EventHubRuntimeInformation
    uid: azure-event-hubs.EventHubRuntimeInformation
  - name: '>'
    fullName: '>'
- uid: Promise<azure-event-hubs.EventHubPartitionRuntimeInformation>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventHubPartitionRuntimeInformation
    fullName: EventHubPartitionRuntimeInformation
    uid: azure-event-hubs.EventHubPartitionRuntimeInformation
  - name: '>'
    fullName: '>'
- uid: azure-event-hubs.OnMessage
  spec.typeScript:
  - name: OnMessage
    fullName: OnMessage
    uid: azure-event-hubs.OnMessage
- uid: azure-event-hubs.OnError
  spec.typeScript:
  - name: OnError
    fullName: OnError
    uid: azure-event-hubs.OnError
- uid: azure-event-hubs.ReceiveOptions
  spec.typeScript:
  - name: ReceiveOptions
    fullName: ReceiveOptions
    uid: azure-event-hubs.ReceiveOptions
- uid: azure-event-hubs.ReceiveHandler
  spec.typeScript:
  - name: ReceiveHandler
    fullName: ReceiveHandler
    uid: azure-event-hubs.ReceiveHandler
- uid: Promise<azure-event-hubs.EventData[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventData
    fullName: EventData
    uid: azure-event-hubs.EventData
  - name: '[]>'
    fullName: '[]>'
- uid: azure-event-hubs.EventData
  spec.typeScript:
  - name: EventData
    fullName: EventData
    uid: azure-event-hubs.EventData
- uid: azure-event-hubs.EventData[]
  spec.typeScript:
  - name: EventData
    fullName: EventData
    uid: azure-event-hubs.EventData
  - name: '[]'
    fullName: '[]'
- uid: azure-event-hubs.ClientOptionsBase
  spec.typeScript:
  - name: ClientOptionsBase
    fullName: ClientOptionsBase
    uid: azure-event-hubs.ClientOptionsBase
- uid: azure-event-hubs.EventHubClient
  spec.typeScript:
  - name: EventHubClient
    fullName: EventHubClient
    uid: azure-event-hubs.EventHubClient
- uid: Promise<azure-event-hubs.EventHubClient>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventHubClient
    fullName: EventHubClient
    uid: azure-event-hubs.EventHubClient
  - name: '>'
    fullName: '>'
