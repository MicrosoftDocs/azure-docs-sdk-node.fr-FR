### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.Face'
    name: Face
    fullName: Face
    children:
      - '@azure/cognitiveservices-face.Face.detectWithStream_2'
      - '@azure/cognitiveservices-face.Face.detectWithStream'
      - '@azure/cognitiveservices-face.Face.detectWithStream_1'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_2'
      - '@azure/cognitiveservices-face.Face.detectWithUrl'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_1'
      - '@azure/cognitiveservices-face.Face.constructor'
      - '@azure/cognitiveservices-face.Face.findSimilar_2'
      - '@azure/cognitiveservices-face.Face.findSimilar'
      - '@azure/cognitiveservices-face.Face.findSimilar_1'
      - '@azure/cognitiveservices-face.Face.group'
      - '@azure/cognitiveservices-face.Face.group_2'
      - '@azure/cognitiveservices-face.Face.group_1'
      - '@azure/cognitiveservices-face.Face.identify_2'
      - '@azure/cognitiveservices-face.Face.identify'
      - '@azure/cognitiveservices-face.Face.identify_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    langs:
      - typeScript
    type: class
    summary: Classe représentant un visage.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_2'
    name: 'detectWithStream(msRest.HttpRequestBody, FaceDetectWithStreamOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options: FaceDetectWithStreamOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Un flux d’image.
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream'
    name: 'detectWithStream(msRest.HttpRequestBody, Models.FaceDetectWithStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Détectez les visages humains dans une image, les rectangles de visage de retour et éventuellement avec faceIds, des points de repère et des attributs.<br />\n* Aucune image ne sera stockée. Uniquement la fonctionnalité de visage extraits est stockée sur serveur. Le faceId représente l’identificateur de la fonctionnalité de visage et sera utilisé dans [doivent faire Face\_: identifier](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [doivent faire Face\_: Vérifiez](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)et [Face\n- Recherchez Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).\nL’ou les fonctionnalités face stockée va expirer et être supprimée après l’appel d’origine de la détection des dernières 24 heures.\n* Les paramètres facultatifs incluent faceId, des points de repère et des attributs. Attributs incluent l’âge, sexe, headPose, sourire, facialHair, lunettes, émotion, cheveux, composition, occlusion, Accessoires, flou, exposition et bruit. Certains des résultats renvoyés pour les attributs spécifiques ne peuvent pas être très précis.\n* JPEG, PNG, GIF (la première image) et format BMP sont pris en charge. La taille du fichier image autorisée est de 1 Ko à 6 Mo.\n* Jusqu'à 100 visages peuvent être retournés pour une image. Faces sont classés par taille de rectangle de face du plus grand à petite.\n* Pour des résultats optimaux lors de l’interrogation [doivent faire Face\_: identifier](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [doivent faire Face\_: Vérifiez](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)et [Face\n- Rechercher Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) ('returnFaceId' a la valeur true), utilisez les visages sont\_: frontale, clairs et avec une taille minimale de 200 x 200 pixels (100 pixels entre les yeux).\n* La taille minimale de visages sont détectables selon est une image ne dépasse pas 1920 x 1080 pixels 36 x 36 pixels.\nLes images avec des dimensions supérieurs à 1920 x 1080 pixels aurez besoin d’une taille de police minimale proportionnellement plus importantes.\n* Les valeurs de différents «\_detectionModel\_» peuvent être fournis. Pour utiliser et comparer des modèles de détection différents, reportez-vous à [comment spécifier un modèle de détection](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)\n| Modèle | Utilisation recommandée-case(s) |\n| ---------- | -------- |\n| 'detection_01'\_: | Le modèle de détection par défaut pour [visage-\nDetect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). Recommander pour près de détection de visage de face. Pour les scénarios avec des visages angle particulièrement volumineux (head-pose), un vaisseau faces ou l’orientation d’image incorrect, les visages dans ce cas ne peuvent pas être détectés. | | 'detection_02'\_: | Modèle de détection publiée en 2019 peut avec une meilleure précision en particulier sur les visages de petite, côtés et est flous. |\n* 'recognitionModel' différentes valeurs sont fournies. Si les opérations de suivi telles que vérifier, identifier, Rechercher similaire sont nécessaires, spécifiez le modèle de reconnaissance avec 'recognitionModel' paramètre. La valeur par défaut pour 'recognitionModel' est 'recognition_01', si le modèle le plus récent nécessaire, veuillez spécifier explicitement le modèle que vous avez besoin dans ce paramètre. Une fois spécifié, le faceIds détectés sera associée au modèle de reconnaissance spécifié. Plus de détails, reportez-vous à [comment spécifier un modèle de reconnaissance](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)\n| Modèle | Utilisation recommandée-case(s) |\n| ---------- | -------- |\n| 'recognition_01'\_: | Le modèle de reconnaissance par défaut pour [visage-\nDetect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). Tous ces faceIds créés avant mars de 2019 sont fixées avec ce modèle de reconnaissance. | | 'recognition_02'\_: | Modèle de reconnaissance publiée en mars de 2019. «\_recognition_02\_» est recommandé dans la mesure où son exactitude globale est améliorée par rapport à «\_recognition_01\_». |"
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Un flux d’image.
        - id: options
          type:
            - Models.FaceDetectWithStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_1'
    name: 'detectWithStream(msRest.HttpRequestBody, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Un flux d’image.
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_2'
    name: 'detectWithUrl(string, FaceDetectWithUrlOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, options: FaceDetectWithUrlOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: URL accessible publiquement d’une image
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl'
    name: 'detectWithUrl(string, Models.FaceDetectWithUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Détectez les visages humains dans une image, les rectangles de visage de retour et éventuellement avec faceIds, des points de repère et des attributs.<br />\n* Aucune image ne sera stockée. Uniquement la fonctionnalité de visage extraits est stockée sur serveur. Le faceId représente l’identificateur de la fonctionnalité de visage et sera utilisé dans [doivent faire Face\_: identifier](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [doivent faire Face\_: Vérifiez](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)et [Face\n- Recherchez Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).\nL’ou les fonctionnalités face stockée va expirer et être supprimée après l’appel d’origine de la détection des dernières 24 heures.\n* Les paramètres facultatifs incluent faceId, des points de repère et des attributs. Attributs incluent l’âge, sexe, headPose, sourire, facialHair, lunettes, émotion, cheveux, composition, occlusion, Accessoires, flou, exposition et bruit. Certains des résultats renvoyés pour les attributs spécifiques ne peuvent pas être très précis.\n* JPEG, PNG, GIF (la première image) et format BMP sont pris en charge. La taille du fichier image autorisée est de 1 Ko à 6 Mo.\n* Jusqu'à 100 visages peuvent être retournés pour une image. Faces sont classés par taille de rectangle de face du plus grand à petite.\n* Pour des résultats optimaux lors de l’interrogation [doivent faire Face\_: identifier](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [doivent faire Face\_: Vérifiez](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)et [Face\n- Rechercher Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) ('returnFaceId' a la valeur true), utilisez les visages sont\_: frontale, clairs et avec une taille minimale de 200 x 200 pixels (100 pixels entre les yeux).\n* La taille minimale de visages sont détectables selon est une image ne dépasse pas 1920 x 1080 pixels 36 x 36 pixels.\nLes images avec des dimensions supérieurs à 1920 x 1080 pixels aurez besoin d’une taille de police minimale proportionnellement plus importantes.\n* Les valeurs de différents «\_detectionModel\_» peuvent être fournis. Pour utiliser et comparer des modèles de détection différents, reportez-vous à [comment spécifier un modèle de détection](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)\n| Modèle | Utilisation recommandée-case(s) |\n| ---------- | -------- |\n| 'detection_01'\_: | Le modèle de détection par défaut pour [visage-\nDetect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). Recommander pour près de détection de visage de face. Pour les scénarios avec des visages angle particulièrement volumineux (head-pose), un vaisseau faces ou l’orientation d’image incorrect, les visages dans ce cas ne peuvent pas être détectés. | | 'detection_02'\_: | Modèle de détection publiée en 2019 peut avec une meilleure précision en particulier sur les visages de petite, côtés et est flous. |\n* 'recognitionModel' différentes valeurs sont fournies. Si les opérations de suivi telles que vérifier, identifier, Rechercher similaire sont nécessaires, spécifiez le modèle de reconnaissance avec 'recognitionModel' paramètre. La valeur par défaut pour 'recognitionModel' est 'recognition_01', si le modèle le plus récent nécessaire, veuillez spécifier explicitement le modèle que vous avez besoin dans ce paramètre. Une fois spécifié, le faceIds détectés sera associée au modèle de reconnaissance spécifié. Plus de détails, reportez-vous à [comment spécifier un modèle de reconnaissance](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)\n| Modèle | Utilisation recommandée-case(s) |\n| ---------- | -------- |\n| 'recognition_01'\_: | Le modèle de reconnaissance par défaut pour [visage-\nDetect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). Tous ces faceIds créés avant mars de 2019 sont fixées avec ce modèle de reconnaissance. | | 'recognition_02'\_: | Modèle de reconnaissance publiée en mars de 2019. «\_recognition_02\_» est recommandé dans la mesure où son exactitude globale est améliorée par rapport à «\_recognition_01\_». |"
    syntax:
      content: 'function detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams)'
      parameters:
        - id: url
          type:
            - string
          description: URL accessible publiquement d’une image
        - id: options
          type:
            - Models.FaceDetectWithUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_1'
    name: 'detectWithUrl(string, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: URL accessible publiquement d’une image
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.constructor'
    name: Face(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Créer une Face.
    syntax:
      content: 'new Face(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            Référence au client du service.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_2'
    name: 'findSimilar(string, FaceFindSimilarOptionalParams, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, options: FaceFindSimilarOptionalParams, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: "FaceId de la face de la requête. Utilisateur doit appeler Face\_: détecter la première pour obtenir un faceId valide. Notez que cette faceId n’est pas persistant et expirera après l’appel de la détection des dernières 24 heures"
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar'
    name: 'findSimilar(string, Models.FaceFindSimilarOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Étant donné faceId requête face, pour rechercher les visages similaires à partir d’un tableau faceId, une liste de visage ou une liste de visages de grande taille. faceId tableau contient les visages créés par [doivent faire Face\_: détecter](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), ce qui va expirer après la création des dernières 24 heures. Un «\_faceListId\_» est créé par [FaceList - créer](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) contenant persistedFaceIds n’expirent pas. Et un «\_largeFaceListId\_» est créé par [LargeFaceList - créer](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) contenant persistedFaceIds également expirent pas. En fonction de l’entrée de la liste de visages similaires retournée contient faceIds ou persistedFaceIds classés par similarité.\n<br/>Rechercher similaire a deux modes de travail, «\_matchPerson\_» et «\_matchFace\_». «\_matchPerson\_» est le mode par défaut qui tente de trouver de visage de la même personne que possible à l’aide de seuils même personne internes. Il est utile rechercher un autre autres photos personne. Notez qu’une liste vide est retournée si aucun visage ne passer les seuils internes. en mode «\_matchFace\_» ignore les seuils de la même personne et le retourne classés visages similaires malgré tout, même la similarité est faible. Il peut être utilisé dans les cas comme la recherche de visages célébrités.\n<br/>Le recognitionModel associé faceId de la face requête doit être le même que le recognitionModel utilisé par la tableau faceId de cible, liste de visage ou face volumineux."
    syntax:
      content: 'function findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: "FaceId de la face de la requête. Utilisateur doit appeler Face\_: détecter la première pour obtenir un faceId valide. Notez que cette faceId n’est pas persistant et expirera après l’appel de la détection des dernières 24 heures"
        - id: options
          type:
            - Models.FaceFindSimilarOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_1'
    name: 'findSimilar(string, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: "FaceId de la face de la requête. Utilisateur doit appeler Face\_: détecter la première pour obtenir un faceId valide. Notez que cette faceId n’est pas persistant et expirera après l’appel de la détection des dernières 24 heures"
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group'
    name: 'group(string[], msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Diviser candidate visages en groupes en fonction de similarité de face.<br />\n* La sortie est un ou plusieurs groupes de visages disjoint et un messyGroup. Un groupe de visage contient les visages qui ont similaire vous recherchez, souvent de la même personne. Groupes de visages sont classés par taille de groupe, c'est-à-dire le nombre de visages. Notez que les faces appartenant à une même personne peuvent être fractionnés en plusieurs groupes dans le résultat.\n* MessyGroup est un groupe de visage spécial contenant des visages qui ne peut pas trouver n’importe quel face équivalent similaire du visage d’origine. Le messyGroup n’apparaîtra pas dans le résultat si tous les visages trouvé leurs équivalents.\n* API de groupe a besoin d’au moins 2 candidate visages et 1000 au maximum. Nous vous suggérons essayez [doivent faire Face\_: Vérifiez](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) lorsque vous avez uniquement des visages candidate 2.\n* Le recognitionModel associé faceIds des visages de la requête doit être le même."
    syntax:
      content: 'function group(faceIds: string[], options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: "Tableau de candidat faceId créé en Face\_: détecter. La valeur maximale est 1 000 visages"
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_2'
    name: 'group(string[], RequestOptionsBase, ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], options: RequestOptionsBase, callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: "Tableau de candidat faceId créé en Face\_: détecter. La valeur maximale est 1 000 visages"
        - id: options
          type:
            - RequestOptionsBase
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_1'
    name: 'group(string[], ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: "Tableau de candidat faceId créé en Face\_: détecter. La valeur maximale est 1 000 visages"
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_2'
    name: 'identify(string[], FaceIdentifyOptionalParams, ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], options: FaceIdentifyOptionalParams, callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: "Tableau de requête est confrontée faceIds, créé par la Face\_: détecter. Chacune des faces sont identifiées indépendamment. Le nombre de faceIds valide est comprise entre [1, 10]."
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify'
    name: 'identify(string[], Models.FaceIdentifyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "identification de 1-à-plusieurs pour rechercher les correspondances les plus proches de la face de personne de requête spécifique à partir d’un groupe de personnes ou d’un groupe de personne volumineux.\n<br/> Pour chaque face dans le tableau faceIds, identifier des visages calculera les similitudes entre le visage de la requête et tous les visages dans le groupe de personnes (donné par personGroupId) ou personne grand groupe (donné par largePersonGroupId), revenez candidat ou les personnes pour auxquels sont confrontées classées par niveau de confiance de similarité. Le groupe de personnes volumineux/groupe de personne doit être formé pour le rendre prêt pour l’identification. En savoir plus dans [groupe de personnes - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) et [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).\n<br/>\nRemarques :<br />\n* L’algorithme permet plus d’un visage doit être assurée indépendamment à la même requête, mais pas plus de 10 faces.\n* Chaque personne dans le groupe de groupe/grande personne personne peut avoir plusieurs visages, mais pas plus de 248 visages.\n* Qualité d’image face supérieure signifie une plus grande précision de l’identification. Pensez aux visages de haute qualité\_: frontal, clear et face taille est de 200 x 200 pixels (100 pixels entre les yeux) ou plus grand.\n* Nombre de candidats retourné est restreint par maxNumOfCandidatesReturned et confidenceThreshold. Si aucune personne n’est identifié, les candidats retournées sera un tableau vide.\n* Essayez [Face - Rechercher similaire](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) lorsque vous devez rechercher des visages similaires dans une liste de visage liste/grande face plutôt qu’un groupe de groupe/grande personne personne.\n* Le recognitionModel associé faceIds des visages de la requête doit être le même que le recognitionModel utilisé par le groupe de personnes cible ou le groupe de personne volumineux."
    syntax:
      content: 'function identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: "Tableau de requête est confrontée faceIds, créé par la Face\_: détecter. Chacune des faces sont identifiées indépendamment. Le nombre de faceIds valide est comprise entre [1, 10]."
        - id: options
          type:
            - Models.FaceIdentifyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_1'
    name: 'identify(string[], ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: "Tableau de requête est confrontée faceIds, créé par la Face\_: détecter. Chacune des faces sont identifiées indépendamment. Le nombre de faceIds valide est comprise entre [1, 10]."
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace'
    name: 'verifyFaceToFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Vérifiez si les deux visages appartiennent à une même personne, ou si un visage appartient à une personne.\n<br/>\nRemarques :<br />\n* Qualité d’image face supérieure signifie une plus grande précision de l’identification. Pensez aux visages de haute qualité\_: frontal, clear et face taille est de 200 x 200 pixels (100 pixels entre les yeux) ou plus grand.\n* Pour les scénarios qui sont sensibles à la précision Vérifiez votre propre jugement.\n* Le recognitionModel associé faceIds des visages de la requête doit être le même que le recognitionModel utilisé par le visage de la cible, le groupe de personnes ou le groupe de personne volumineux."
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceId1
          type:
            - string
          description: "faceId de la première face provient de la Face\_: détecter"
        - id: faceId2
          type:
            - string
          description: "faceId de la deuxième face, provient de la Face\_: détecter"
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
    name: 'verifyFaceToFace(string, string, RequestOptionsBase, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: RequestOptionsBase, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: "faceId de la première face provient de la Face\_: détecter"
        - id: faceId2
          type:
            - string
          description: "faceId de la deuxième face, provient de la Face\_: détecter"
        - id: options
          type:
            - RequestOptionsBase
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
    name: 'verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: "faceId de la première face provient de la Face\_: détecter"
        - id: faceId2
          type:
            - string
          description: "faceId de la deuxième face, provient de la Face\_: détecter"
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
    name: 'verifyFaceToPerson(string, string, FaceVerifyFaceToPersonOptionalParams, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options: FaceVerifyFaceToPersonOptionalParams, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: "FaceId du visage, provient de la Face\_: détecter"
        - id: personId
          type:
            - string
          description: "Spécifiez une personne spécifique dans un groupe de personnes ou d’un groupe de personnes volumineux. personId est créé dans le groupe de personnes personne\_: créez ou LargePersonGroup personne - créer."
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
    name: 'verifyFaceToPerson(string, string, Models.FaceVerifyFaceToPersonOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Vérifiez si les deux visages appartiennent à une même personne. Compare une face Id avec un Id de la personne
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: "FaceId du visage, provient de la Face\_: détecter"
        - id: personId
          type:
            - string
          description: "Spécifiez une personne spécifique dans un groupe de personnes ou d’un groupe de personnes volumineux. personId est créé dans le groupe de personnes personne\_: créez ou LargePersonGroup personne - créer."
        - id: options
          type:
            - Models.FaceVerifyFaceToPersonOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    name: 'verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: "FaceId du visage, provient de la Face\_: détecter"
        - id: personId
          type:
            - string
          description: "Spécifiez une personne spécifique dans un groupe de personnes ou d’un groupe de personnes volumineux. personId est créé dans le groupe de personnes personne\_: créez ou LargePersonGroup personne - créer."
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectedFace
        fullName: DetectedFace
        uid: '@azure/cognitiveservices-face.DetectedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
    name: FaceDetectWithStreamOptionalParams
    spec.typeScript:
      - name: FaceDetectWithStreamOptionalParams
        fullName: FaceDetectWithStreamOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
    name: FaceDetectWithUrlOptionalParams
    spec.typeScript:
      - name: FaceDetectWithUrlOptionalParams
        fullName: FaceDetectWithUrlOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
    name: 'SimilarFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SimilarFace
        fullName: SimilarFace
        uid: '@azure/cognitiveservices-face.SimilarFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
    name: FaceFindSimilarOptionalParams
    spec.typeScript:
      - name: FaceFindSimilarOptionalParams
        fullName: FaceFindSimilarOptionalParams
        uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.GroupResult>
    name: GroupResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: GroupResult
        fullName: GroupResult
        uid: '@azure/cognitiveservices-face.GroupResult'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
    name: 'IdentifyResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IdentifyResult
        fullName: IdentifyResult
        uid: '@azure/cognitiveservices-face.IdentifyResult'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
    name: FaceIdentifyOptionalParams
    spec.typeScript:
      - name: FaceIdentifyOptionalParams
        fullName: FaceIdentifyOptionalParams
        uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/cognitiveservices-face.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
    name: FaceVerifyFaceToPersonOptionalParams
    spec.typeScript:
      - name: FaceVerifyFaceToPersonOptionalParams
        fullName: FaceVerifyFaceToPersonOptionalParams
        uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'