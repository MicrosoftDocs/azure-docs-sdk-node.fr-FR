### YamlMime:UniversalReference
ms.openlocfilehash: fd9659c6d754a551c1196d82e6d7d47fe353e207
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 08/22/2018
ms.locfileid: "41696056"
items:
- uid: '@azure/cosmos.Item'
  name: Item
  fullName: Item
  children:
  - '@azure/cosmos.Item.container'
  - '@azure/cosmos.Item.delete'
  - '@azure/cosmos.Item.delete_1'
  - '@azure/cosmos.Item.id'
  - '@azure/cosmos.Item.primaryKey'
  - '@azure/cosmos.Item.read'
  - '@azure/cosmos.Item.read_1'
  - '@azure/cosmos.Item.replace'
  - '@azure/cosmos.Item.replace_1'
  - '@azure/cosmos.Item.url'
  langs:
  - typeScript
  type: class
  summary: Utilisé pour effectuer des opérations sur un élément spécifique.
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.container'
  name: container
  fullName: container
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'container: Container'
    return:
      type:
      - '@azure/cosmos.Container'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.delete'
  name: delete
  children: []
  type: method
  langs:
  - typeScript
  summary: Supprimer l’élément.
  syntax:
    content: 'function delete(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Options supplémentaires pour la requête, comme la clé de partition.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.delete_1'
  name: delete
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Supprimer l’élément.

    Les fournie de type, T, n’est pas nécessairement appliquée par le Kit de développement.

    Vous pouvez obtenir plus ou moins les propriétés, et c’est à votre logique de l’appliquer.
  syntax:
    content: 'function delete<T>(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Options supplémentaires pour la requête, comme la clé de partition.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.id'
  name: id
  fullName: id
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'id: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.primaryKey'
  name: primaryKey
  fullName: primaryKey
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'primaryKey: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.read'
  name: read
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Lire la définition de l’élément.

    Il n’existe aucun schéma de jeu pour les éléments JSON. Ils peuvent contenir n’importe quel nombre de propriétés personnalisées.
  syntax:
    content: 'function read(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Options supplémentaires pour la requête, comme la clé de partition.

        Notez que si vous fournissez une clé de partition sur l’objet d’options, il remplace la clé primaire sur `this.primaryKey`.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.read_1'
  name: read
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Lire la définition de l’élément.

    Les fournie de type, T, n’est pas nécessairement appliquée par le Kit de développement.

    Vous pouvez obtenir plus ou moins les propriétés, et c’est à votre logique de l’appliquer.

    Si le type, T, est une classe, il ne sont pas transmis `typeof` comparaisons, car il ne dispose d’un prototype de correspondance.

    Il est recommandé d’utiliser uniquement des interfaces.


    Il n’existe aucun schéma de jeu pour les éléments JSON. Ils peuvent contenir n’importe quel nombre de propriétés personnalisées.
  syntax:
    content: 'function read<T>(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Options supplémentaires pour la requête, comme la clé de partition.

        Notez que si vous fournissez une clé de partition sur l’objet d’options, il remplace la clé primaire sur `this.primaryKey`.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.replace'
  name: replace
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Remplacez la définition de l’élément.

    Il n’existe aucun schéma de jeu pour les éléments JSON. Ils peuvent contenir n’importe quel nombre de propriétés personnalisées.
  syntax:
    content: 'function replace(body: ItemDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ItemDefinition'
      description: La définition pour remplacer la <xref:Item>de la définition d’avec.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Options supplémentaires pour la requête, comme la clé de partition.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.replace_1'
  name: replace
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Remplacez la définition de l’élément.

    Les fournie de type, T, n’est pas nécessairement appliquée par le Kit de développement.

    Vous pouvez obtenir plus ou moins les propriétés, et c’est à votre logique de l’appliquer.


    Il n’existe aucun schéma de jeu pour les éléments JSON. Ils peuvent contenir n’importe quel nombre de propriétés personnalisées.
  syntax:
    content: 'function replace<T>(body: T, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - T
      description: La définition pour remplacer la <xref:Item>de la définition d’avec.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Options supplémentaires pour la requête, comme la clé de partition.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.url'
  name: url
  fullName: url
  children: []
  langs:
  - typeScript
  type: property
  summary: Retourne une URL de référence à la ressource. Utilisé pour la liaison dans les autorisations.
  syntax:
    content: 'url: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Container'
  spec.typeScript:
  - name: Container
    fullName: Container
    uid: '@azure/cosmos.Container'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ItemResponse
    fullName: ItemResponse
    uid: '@azure/cosmos.ItemResponse'
  - name: <
    fullName: <
  - name: ItemDefinition
    fullName: ItemDefinition
    uid: '@azure/cosmos.ItemDefinition'
  - name: '>>'
    fullName: '>>'
- uid: Promise<@azure/cosmos.ItemResponse<T>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ItemResponse
    fullName: ItemResponse
    uid: '@azure/cosmos.ItemResponse'
  - name: <T>>
    fullName: <T>>
- uid: '@azure/cosmos.ItemDefinition'
  spec.typeScript:
  - name: ItemDefinition
    fullName: ItemDefinition
    uid: '@azure/cosmos.ItemDefinition'
