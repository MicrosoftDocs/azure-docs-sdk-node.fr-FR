### YamlMime:UniversalReference
ms.openlocfilehash: 1aa6f8d573fc6248e534db33c9d88b9d44b294c6
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 08/22/2018
ms.locfileid: "41702348"
items:
- uid: '@azure/cosmos.Containers'
  name: Containers
  fullName: Containers
  children:
  - '@azure/cosmos.Containers.constructor'
  - '@azure/cosmos.Containers.create'
  - '@azure/cosmos.Containers.createIfNotExists'
  - '@azure/cosmos.Containers.database'
  - '@azure/cosmos.Containers.query'
  - '@azure/cosmos.Containers.readAll'
  langs:
  - typeScript
  type: class
  summary: Opérations de création de nouveaux conteneurs et de lecture et d’interrogation tous les conteneurs
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.constructor'
  name: Containers
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Containers(database: Database, clientContext: ClientContext)'
    parameters:
    - id: database
      type:
      - '@azure/cosmos.Database'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Crée un conteneur.

    Un conteneur est un conteneur nommé logique pour les éléments.


    Une base de données peut contenir zéro ou plusieurs conteneurs nommés et chaque conteneur se compose de zéro ou plusieurs éléments JSON.


    En cours sans schéma, les éléments dans un conteneur n’avez pas besoin de partager la même structure ou champs.



    Étant donné que les conteneurs sont des ressources d’application, ils peuvent être autorisés à l’aide de la clé principale ou des clés de ressources.
  syntax:
    content: 'function create(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: Représente le corps du conteneur.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Vérifie si un conteneur existe et, si ce n’est pas le cas, il crée.

    Vous serez ainsi une opération de lecture en fonction de l’id dans le `body`, ensuite, si elle est introuvable, une opération de création.

    Vous devez vérifier que la sortie correspond à l’organisme transmis non-propriétés par défaut (par exemple, indexation stratégie/etc.) Un conteneur est un conteneur nommé logique pour les éléments.


    Une base de données peut contenir zéro ou plusieurs conteneurs nommés et chaque conteneur se compose de zéro ou plusieurs éléments JSON.


    En cours sans schéma, les éléments dans un conteneur n’avez pas besoin de partager la même structure ou champs.



    Étant donné que les conteneurs sont des ressources d’application, ils peuvent être autorisés à l’aide de la clé principale ou des clés de ressources.
  syntax:
    content: 'function createIfNotExists(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: Représente le corps du conteneur.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: Interroge tous les conteneurs.
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: Configuration de la requête pour l’opération. Consultez <xref:SqlQuerySpec> pour plus d’informations sur la configuration d’une requête.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: Lire tous les conteneurs.
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.ContainerDefinition'
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
  - name: '>'
    fullName: '>'
