### YamlMime:UniversalReference
ms.openlocfilehash: 7202147c6c89f0015f6c9c5d602ffaeb968005da
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52029493"
items:
- uid: '@azure/cosmos.Containers'
  name: Containers
  fullName: Containers
  children:
  - '@azure/cosmos.Containers.constructor'
  - '@azure/cosmos.Containers.create'
  - '@azure/cosmos.Containers.createIfNotExists'
  - '@azure/cosmos.Containers.database'
  - '@azure/cosmos.Containers.query'
  - '@azure/cosmos.Containers.query_1'
  - '@azure/cosmos.Containers.readAll'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="8c439-101">Opérations de création de nouveaux conteneurs et de lecture et d’interrogation tous les conteneurs</span><span class="sxs-lookup"><span data-stu-id="8c439-101">Operations for creating new containers, and reading/querying all containers</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.constructor'
  name: Containers(Database, ClientContext)
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Containers(database: Database, clientContext: ClientContext)'
    parameters:
    - id: database
      type:
      - '@azure/cosmos.Database'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.create'
  name: create(ContainerDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="8c439-102">Crée un conteneur.</span><span class="sxs-lookup"><span data-stu-id="8c439-102">Creates a container.</span></span>

    <span data-ttu-id="8c439-103">Un conteneur est un conteneur nommé logique pour les éléments.</span><span class="sxs-lookup"><span data-stu-id="8c439-103">A container is a named logical container for items.</span></span>


    <span data-ttu-id="8c439-104">Une base de données peut contenir zéro ou plusieurs conteneurs nommés et chaque conteneur se compose de zéro ou plusieurs éléments JSON.</span><span class="sxs-lookup"><span data-stu-id="8c439-104">A database may contain zero or more named containers and each container consists of zero or more JSON items.</span></span>


    <span data-ttu-id="8c439-105">En cours sans schéma, les éléments dans un conteneur n’avez pas besoin de partager la même structure ou champs.</span><span class="sxs-lookup"><span data-stu-id="8c439-105">Being schema-free, the items in a container do not need to share the same structure or fields.</span></span>



    <span data-ttu-id="8c439-106">Étant donné que les conteneurs sont des ressources d’application, ils peuvent être autorisés à l’aide de la clé principale ou des clés de ressources.</span><span class="sxs-lookup"><span data-stu-id="8c439-106">Since containers are application resources, they can be authorized using either the master key or resource keys.</span></span>
  syntax:
    content: 'function create(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: <span data-ttu-id="8c439-107">Représente le corps du conteneur.</span><span class="sxs-lookup"><span data-stu-id="8c439-107">Represents the body of the container.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="8c439-108">Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.</span><span class="sxs-lookup"><span data-stu-id="8c439-108">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.createIfNotExists'
  name: createIfNotExists(ContainerDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="8c439-109">Vérifie si un conteneur existe et, si ce n’est pas le cas, il crée.</span><span class="sxs-lookup"><span data-stu-id="8c439-109">Checks if a Container exists, and, if it doesn't, creates it.</span></span>

    <span data-ttu-id="8c439-110">Vous serez ainsi une opération de lecture en fonction de l’id dans le `body`, ensuite, si elle est introuvable, une opération de création.</span><span class="sxs-lookup"><span data-stu-id="8c439-110">This will make a read operation based on the id in the `body`, then if it is not found, a create operation.</span></span>

    <span data-ttu-id="8c439-111">Vous devez vérifier que la sortie correspond à l’organisme transmis non-propriétés par défaut (par exemple, indexation stratégie/etc.) Un conteneur est un conteneur nommé logique pour les éléments.</span><span class="sxs-lookup"><span data-stu-id="8c439-111">You should confirm that the output matches the body you passed in for non-default properties (i.e. indexing policy/etc.) A container is a named logical container for items.</span></span>


    <span data-ttu-id="8c439-112">Une base de données peut contenir zéro ou plusieurs conteneurs nommés et chaque conteneur se compose de zéro ou plusieurs éléments JSON.</span><span class="sxs-lookup"><span data-stu-id="8c439-112">A database may contain zero or more named containers and each container consists of zero or more JSON items.</span></span>


    <span data-ttu-id="8c439-113">En cours sans schéma, les éléments dans un conteneur n’avez pas besoin de partager la même structure ou champs.</span><span class="sxs-lookup"><span data-stu-id="8c439-113">Being schema-free, the items in a container do not need to share the same structure or fields.</span></span>



    <span data-ttu-id="8c439-114">Étant donné que les conteneurs sont des ressources d’application, ils peuvent être autorisés à l’aide de la clé principale ou des clés de ressources.</span><span class="sxs-lookup"><span data-stu-id="8c439-114">Since containers are application resources, they can be authorized using either the master key or resource keys.</span></span>
  syntax:
    content: 'function createIfNotExists(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: <span data-ttu-id="8c439-115">Représente le corps du conteneur.</span><span class="sxs-lookup"><span data-stu-id="8c439-115">Represents the body of the container.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="8c439-116">Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.</span><span class="sxs-lookup"><span data-stu-id="8c439-116">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="8c439-117">Interroge tous les conteneurs.</span><span class="sxs-lookup"><span data-stu-id="8c439-117">Queries all containers.</span></span>
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: <span data-ttu-id="8c439-118">Configuration de la requête pour l’opération.</span><span class="sxs-lookup"><span data-stu-id="8c439-118">Query configuration for the operation.</span></span> <span data-ttu-id="8c439-119">Consultez <xref:SqlQuerySpec> pour plus d’informations sur la configuration d’une requête.</span><span class="sxs-lookup"><span data-stu-id="8c439-119">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="8c439-120">Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.</span><span class="sxs-lookup"><span data-stu-id="8c439-120">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<any>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query_1'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="8c439-121">Interroge tous les conteneurs.</span><span class="sxs-lookup"><span data-stu-id="8c439-121">Queries all containers.</span></span>
  syntax:
    content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: <span data-ttu-id="8c439-122">Configuration de la requête pour l’opération.</span><span class="sxs-lookup"><span data-stu-id="8c439-122">Query configuration for the operation.</span></span> <span data-ttu-id="8c439-123">Consultez <xref:SqlQuerySpec> pour plus d’informations sur la configuration d’une requête.</span><span class="sxs-lookup"><span data-stu-id="8c439-123">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="8c439-124">Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.</span><span class="sxs-lookup"><span data-stu-id="8c439-124">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<T>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.readAll'
  name: readAll(FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="8c439-125">Lire tous les conteneurs.</span><span class="sxs-lookup"><span data-stu-id="8c439-125">Read all containers.</span></span>
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="8c439-126">Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.</span><span class="sxs-lookup"><span data-stu-id="8c439-126">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition & @azure/cosmos.Resource>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  name: Database
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.ContainerDefinition'
  name: ContainerDefinition
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.RequestOptions'
  name: RequestOptions
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  name: ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  name: SqlQuerySpec
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  name: FeedOptions
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<any>'
  name: QueryIterator<any>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <any>
    fullName: <any>
- uid: '@azure/cosmos.QueryIterator<T>'
  name: QueryIterator<T>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <T>
    fullName: <T>
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition & @azure/cosmos.Resource>'
  name: Resource>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
  - name: " & "
    fullName: " & "
  - name: Resource
    fullName: Resource
    uid: '@azure/cosmos.Resource'
  - name: '>'
    fullName: '>'
