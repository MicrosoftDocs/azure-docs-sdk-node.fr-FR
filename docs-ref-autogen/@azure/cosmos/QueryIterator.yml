### YamlMime:UniversalReference
ms.openlocfilehash: 191cfc4fa4e9d81715994e7d0270373adb0a73b0
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 08/22/2018
ms.locfileid: "41701697"
items:
- uid: '@azure/cosmos.QueryIterator'
  name: QueryIterator
  fullName: QueryIterator<T>
  children:
  - '@azure/cosmos.QueryIterator.current'
  - '@azure/cosmos.QueryIterator.executeNext'
  - '@azure/cosmos.QueryIterator.forEach'
  - '@azure/cosmos.QueryIterator.getAsyncIterator'
  - '@azure/cosmos.QueryIterator.hasMoreResults'
  - '@azure/cosmos.QueryIterator.nextItem'
  - '@azure/cosmos.QueryIterator.reset'
  - '@azure/cosmos.QueryIterator.toArray'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="42a41-101">Représente un objet QueryIterator, une implmenetation de réponse de flux ou une requête qui permet de parcours et effectuant une itération sur la réponse dans le service de base de données Azure Cosmos DB.</span><span class="sxs-lookup"><span data-stu-id="42a41-101">Represents a QueryIterator Object, an implmenetation of feed or query response that enables traversal and iterating over the response in the Azure Cosmos DB database service.</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.current'
  name: current
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="42a41-102">Récupérer l’élément actuel sur le QueryIterator.</span><span class="sxs-lookup"><span data-stu-id="42a41-102">Retrieve the current element on the QueryIterator.</span></span>
  syntax:
    content: function current()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.executeNext'
  name: executeNext
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="42a41-103">Extraire le lot suivant du flux de données et les transmettre sous forme de tableau à une fonction</span><span class="sxs-lookup"><span data-stu-id="42a41-103">Retrieve the next batch of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function executeNext()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.forEach'
  name: forEach
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="42a41-104">Appelle un rappel spécifié pour chaque élément retourné par la requête.</span><span class="sxs-lookup"><span data-stu-id="42a41-104">Calls a specified callback for each item returned from the query.</span></span>

    <span data-ttu-id="42a41-105">S’exécute en série ; chaque rappel bloque la suivante.</span><span class="sxs-lookup"><span data-stu-id="42a41-105">Runs serially; each callback blocks the next.</span></span>
  syntax:
    content: 'function forEach(callback: (result: T, headers?: IHeaders, index?: number) => boolean | void)'
    parameters:
    - id: callback
      type:
      - '(result: T, headers?: IHeaders, index?: number) => boolean | void'
      description: >
        <span data-ttu-id="42a41-106">Rappel spécifié.</span><span class="sxs-lookup"><span data-stu-id="42a41-106">Specified callback.</span></span>

        <span data-ttu-id="42a41-107">Premier paramètre est le résultat, deuxième param (facultatif) est l’état actuel de l’objet en-têtes, troisième param (facultatif) est l’index actuel.</span><span class="sxs-lookup"><span data-stu-id="42a41-107">First param is the result, second param (optional) is the current headers object state, third param (optional) is current index.</span></span>

        <span data-ttu-id="42a41-108">Plus aucun rappel ne sera appelée si un d’eux génère false.</span><span class="sxs-lookup"><span data-stu-id="42a41-108">No more callbacks will be called if one of them results false.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.getAsyncIterator'
  name: getAsyncIterator
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="42a41-109">Obtient un itérateur asynchrone qui produire des résultats jusqu'à la fin.</span><span class="sxs-lookup"><span data-stu-id="42a41-109">Gets an async iterator that will yield results until completion.</span></span>

    <span data-ttu-id="42a41-110">Remarque : AsyncIterators sont une fonctionnalité très récente et vous devrez peut-être utiliser polyfils/etc. pour les utiliser dans votre code.</span><span class="sxs-lookup"><span data-stu-id="42a41-110">NOTE: AsyncIterators are a very new feature and you might need to use polyfils/etc. in order to use them in your code.</span></span>


    <span data-ttu-id="42a41-111">Si vous utilisez TypeScript, vous pouvez utiliser le polyfill suivant aussi longtemps que vous ciblez ES6 ou version ultérieure et sont en cours d’exécution sur le nœud 6 ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="42a41-111">If you're using TypeScript, you can use the following polyfill as long as you target ES6 or higher and are running on Node 6 or higher.</span></span>


    ```typescript

    if (!Symbol || !Symbol.asyncIterator) {
      (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
    }

    ```
  syntax:
    content: function getAsyncIterator()
    parameters: []
    return:
      type:
      - AsyncIterable<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.hasMoreResults'
  name: hasMoreResults
  children: []
  type: method
  langs:
  - typeScript
  summary: ''
  syntax:
    content: function hasMoreResults()
    parameters: []
    return:
      type:
      - boolean
  package: '@azure/cosmos'
  deprecated:
    content: >-
      Instead check if nextItem() or current() returns undefined.


      Determine if there are still remaining resources to processs based on the value of the continuation token or the\

      elements remaining on the current batch in the QueryIterator.
- uid: '@azure/cosmos.QueryIterator.nextItem'
  name: nextItem
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="42a41-112">Exécuter une fonction fournie sur l’élément suivant dans le QueryIterator.</span><span class="sxs-lookup"><span data-stu-id="42a41-112">Execute a provided function on the next element in the QueryIterator.</span></span>
  syntax:
    content: function nextItem()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.reset'
  name: reset
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="42a41-113">Réinitialiser le QueryIterator au début et désactivez toutes les ressources qu’il contient</span><span class="sxs-lookup"><span data-stu-id="42a41-113">Reset the QueryIterator to the beginning and clear all the resources inside it</span></span>
  syntax:
    content: function reset()
    parameters: []
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.toArray'
  name: toArray
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="42a41-114">Récupérer tous les éléments du flux de données et les transmettre sous forme de tableau à une fonction</span><span class="sxs-lookup"><span data-stu-id="42a41-114">Retrieve all the elements of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function toArray()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T[]>>
  package: '@azure/cosmos'
references:
- uid: Promise<@azure/cosmos.Response<T>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: AsyncIterable<@azure/cosmos.Response<T>>
  spec.typeScript:
  - name: AsyncIterable<
    fullName: AsyncIterable<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: Promise<@azure/cosmos.Response<T[]>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T[]>>
    fullName: <T[]>>
