### YamlMime:UniversalReference
ms.openlocfilehash: 56789ebeca7ab18b9af71b968096cbb2061fddb9
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 08/22/2018
ms.locfileid: "41691158"
items:
- uid: '@azure/cosmos.Databases'
  name: Databases
  fullName: Databases
  children:
  - '@azure/cosmos.Databases.create'
  - '@azure/cosmos.Databases.createIfNotExists'
  - '@azure/cosmos.Databases.constructor'
  - '@azure/cosmos.Databases.query'
  - '@azure/cosmos.Databases.readAll'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="8e51f-101">Opérations de création de nouvelles bases de données et de lecture et d’interrogation toutes les bases de données</span><span class="sxs-lookup"><span data-stu-id="8e51f-101">Operations for creating new databases, and reading/querying all databases</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="8e51f-102">Envoyer une demande de création d’une base de données.</span><span class="sxs-lookup"><span data-stu-id="8e51f-102">Send a request for creating a database.</span></span>

    <span data-ttu-id="8e51f-103">Une base de données gère les utilisateurs, autorisations et un ensemble de conteneurs.</span><span class="sxs-lookup"><span data-stu-id="8e51f-103">A database manages users, permissions and a set of containers.</span></span>

    <span data-ttu-id="8e51f-104">Chaque compte de base de données Azure Cosmos DB est en mesure de prendre en charge plusieurs indépendantes nommées des bases de données, avec la base de données qui est le conteneur logique pour les données.</span><span class="sxs-lookup"><span data-stu-id="8e51f-104">Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data.</span></span>


    <span data-ttu-id="8e51f-105">Chaque base de données se compose d’un ou plusieurs conteneurs, chacun d'entre eux contenant à son tour un ou plusieurs documents.</span><span class="sxs-lookup"><span data-stu-id="8e51f-105">Each Database consists of one or more containers, each of which in turn contain one or more documents.</span></span> <span data-ttu-id="8e51f-106">Dans la mesure où les bases de données sont une une ressource d’administration, la clé principale du Service sera requis pour accéder à et de mener à bien une action à l’aide de l’API de l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="8e51f-106">Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.</span></span>
  syntax:
    content: 'function create(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <span data-ttu-id="8e51f-107">Le <xref:DatabaseDefinition> qui représente le <xref:Database> doit être créé.</span><span class="sxs-lookup"><span data-stu-id="8e51f-107">The <xref:DatabaseDefinition> that represents the <xref:Database> to be created.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="8e51f-108">Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.</span><span class="sxs-lookup"><span data-stu-id="8e51f-108">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="8e51f-109">Vérifiez si une base de données existe et si elle ne, créez-le.</span><span class="sxs-lookup"><span data-stu-id="8e51f-109">Check if a database exists, and if it doesn't, create it.</span></span>

    <span data-ttu-id="8e51f-110">Vous serez ainsi une opération de lecture en fonction de l’id dans le `body`, ensuite, si elle est introuvable, une opération de création.</span><span class="sxs-lookup"><span data-stu-id="8e51f-110">This will make a read operation based on the id in the `body`, then if it is not found, a create operation.</span></span>

    <span data-ttu-id="8e51f-111">Une base de données gère les utilisateurs, autorisations et un ensemble de conteneurs.</span><span class="sxs-lookup"><span data-stu-id="8e51f-111">A database manages users, permissions and a set of containers.</span></span>

    <span data-ttu-id="8e51f-112">Chaque compte de base de données Azure Cosmos DB est en mesure de prendre en charge plusieurs indépendantes nommées des bases de données, avec la base de données qui est le conteneur logique pour les données.</span><span class="sxs-lookup"><span data-stu-id="8e51f-112">Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data.</span></span>


    <span data-ttu-id="8e51f-113">Chaque base de données se compose d’un ou plusieurs conteneurs, chacun d'entre eux contenant à son tour un ou plusieurs documents.</span><span class="sxs-lookup"><span data-stu-id="8e51f-113">Each Database consists of one or more containers, each of which in turn contain one or more documents.</span></span> <span data-ttu-id="8e51f-114">Dans la mesure où les bases de données sont une une ressource d’administration, la clé principale du Service sera requis pour accéder à et de mener à bien une action à l’aide de l’API de l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="8e51f-114">Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.</span></span>
  syntax:
    content: 'function createIfNotExists(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <span data-ttu-id="8e51f-115">Le <xref:DatabaseDefinition> qui représente le <xref:Database> doit être créé.</span><span class="sxs-lookup"><span data-stu-id="8e51f-115">The <xref:DatabaseDefinition> that represents the <xref:Database> to be created.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: "\n"
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.constructor'
  name: Databases
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Databases(client: CosmosClient, clientContext: ClientContext)'
    parameters:
    - id: client
      type:
      - '@azure/cosmos.CosmosClient'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="8e51f-116">Interroge toutes les bases de données.</span><span class="sxs-lookup"><span data-stu-id="8e51f-116">Queries all databases.</span></span>
  syntax:
    content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: <span data-ttu-id="8e51f-117">Configuration de la requête pour l’opération.</span><span class="sxs-lookup"><span data-stu-id="8e51f-117">Query configuration for the operation.</span></span> <span data-ttu-id="8e51f-118">Consultez <xref:SqlQuerySpec> pour plus d’informations sur la configuration d’une requête.</span><span class="sxs-lookup"><span data-stu-id="8e51f-118">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="8e51f-119">Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.</span><span class="sxs-lookup"><span data-stu-id="8e51f-119">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="8e51f-120">Lit toutes les bases de données.</span><span class="sxs-lookup"><span data-stu-id="8e51f-120">Reads all databases.</span></span>
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="8e51f-121">Permet de définir des options telles que la taille de page de réponse, les jetons de continuation, etc.</span><span class="sxs-lookup"><span data-stu-id="8e51f-121">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.CosmosClient'
  spec.typeScript:
  - name: CosmosClient
    fullName: CosmosClient
    uid: '@azure/cosmos.CosmosClient'
- uid: '@azure/cosmos.DatabaseDefinition'
  spec.typeScript:
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.DatabaseResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DatabaseResponse
    fullName: DatabaseResponse
    uid: '@azure/cosmos.DatabaseResponse'
  - name: '>'
    fullName: '>'
- uid: string | @azure/cosmos.SqlQuerySpec
  spec.typeScript:
  - name: 'string | '
    fullName: 'string | '
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
  - name: '>'
    fullName: '>'
