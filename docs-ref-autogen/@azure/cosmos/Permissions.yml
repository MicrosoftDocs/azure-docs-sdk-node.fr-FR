### YamlMime:UniversalReference
ms.openlocfilehash: 4f35a5e6d4439f9288cc6f295fc91a9715f5defe
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52054378"
items:
- uid: '@azure/cosmos.Permissions'
  name: Permissions
  fullName: Permissions
  children:
  - '@azure/cosmos.Permissions.create'
  - '@azure/cosmos.Permissions.query'
  - '@azure/cosmos.Permissions.query_1'
  - '@azure/cosmos.Permissions.readAll'
  - '@azure/cosmos.Permissions.upsert'
  - '@azure/cosmos.Permissions.user'
  langs:
  - typeScript
  type: class
  summary: Permet de créer, remplacer, interroger et toutes les autorisations de lecture.
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Permissions.create'
  name: create(PermissionDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    Créer une autorisation.

    Une autorisation représente un autorisation d’accéder à une ressource spécifique, par exemple, élément ou un conteneur par utilisateur.
  syntax:
    content: 'function create(body: PermissionDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.PermissionDefinition'
      description: >
        Représente le corps de l’autorisation.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.PermissionResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Permissions.query'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Interroger toutes les autorisations.
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: Configuration de la requête pour l’opération. Consultez <xref:SqlQuerySpec> pour plus d’informations sur la configuration d’une requête.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: "\n"
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<any>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Permissions.query_1'
  name: query(SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Interroger toutes les autorisations.
  syntax:
    content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: Configuration de la requête pour l’opération. Consultez <xref:SqlQuerySpec> pour plus d’informations sur la configuration d’une requête.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: "\n"
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<T>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Permissions.readAll'
  name: readAll(FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Toutes les autorisations de lecture.
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.PermissionDefinition & @azure/cosmos.Resource>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Permissions.upsert'
  name: upsert(PermissionDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Upsert une autorisation.

    Une autorisation représente un autorisation d’accéder à une ressource spécifique, par exemple, élément ou conteneur par utilisateur.
  syntax:
    content: 'function upsert(body: PermissionDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.PermissionDefinition'
      description: ''
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.PermissionResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Permissions.user'
  name: user
  fullName: user
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'user: User'
    return:
      type:
      - '@azure/cosmos.User'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.User'
  name: User
  spec.typeScript:
  - name: User
    fullName: User
    uid: '@azure/cosmos.User'
- uid: '@azure/cosmos.PermissionDefinition'
  name: PermissionDefinition
  spec.typeScript:
  - name: PermissionDefinition
    fullName: PermissionDefinition
    uid: '@azure/cosmos.PermissionDefinition'
- uid: '@azure/cosmos.RequestOptions'
  name: RequestOptions
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.PermissionResponse>
  name: PermissionResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: PermissionResponse
    fullName: PermissionResponse
    uid: '@azure/cosmos.PermissionResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  name: SqlQuerySpec
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  name: FeedOptions
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<any>'
  name: QueryIterator<any>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <any>
    fullName: <any>
- uid: '@azure/cosmos.QueryIterator<T>'
  name: QueryIterator<T>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <T>
    fullName: <T>
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.PermissionDefinition & @azure/cosmos.Resource>'
  name: Resource>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: PermissionDefinition
    fullName: PermissionDefinition
    uid: '@azure/cosmos.PermissionDefinition'
  - name: " & "
    fullName: " & "
  - name: Resource
    fullName: Resource
    uid: '@azure/cosmos.Resource'
  - name: '>'
    fullName: '>'
