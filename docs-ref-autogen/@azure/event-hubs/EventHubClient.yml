### YamlMime:UniversalReference
items:
  - uid: '@azure/event-hubs.EventHubClient'
    name: EventHubClient
    fullName: EventHubClient
    children:
      - '@azure/event-hubs.EventHubClient.close'
      - '@azure/event-hubs.EventHubClient.connectionId'
      - '@azure/event-hubs.EventHubClient.createFromAadTokenCredentials'
      - '@azure/event-hubs.EventHubClient.createFromConnectionString'
      - '@azure/event-hubs.EventHubClient.createFromIotHubConnectionString'
      - '@azure/event-hubs.EventHubClient.createFromTokenProvider'
      - '@azure/event-hubs.EventHubClient.constructor'
      - '@azure/event-hubs.EventHubClient.eventhubName'
      - '@azure/event-hubs.EventHubClient.getHubRuntimeInformation'
      - '@azure/event-hubs.EventHubClient.getPartitionIds'
      - '@azure/event-hubs.EventHubClient.getPartitionInformation'
      - '@azure/event-hubs.EventHubClient.receive'
      - '@azure/event-hubs.EventHubClient.receiveBatch'
      - '@azure/event-hubs.EventHubClient.send'
      - '@azure/event-hubs.EventHubClient.sendBatch'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ferme la connexion AMQP au Hub d’événements pour ce client, retourner une promesse qui sera résolue lors de la déconnexion est terminée.'
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.connectionId'
    name: connectionId
    fullName: connectionId
    children: []
    langs:
      - typeScript
    type: property
    summary: '{chaîne} [connectionId] L’id de connexion amqp qui identifie de façon unique la connexion au sein d’un processus.'
    optional: true
    syntax:
      content: 'connectionId?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createFromAadTokenCredentials'
    name: 'createFromAadTokenCredentials(string, string, ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, ClientOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Crée un Client EventHub à partir de AADTokenCredentials.
    syntax:
      content: 'static function createFromAadTokenCredentials(host: string, entityPath: string, credentials: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, options?: ClientOptionsBase)'
      parameters:
        - id: host
          type:
            - string
          description: 'Nom de domaine complet pour Event Hubs. Vraisemblablement, <yournamespace>. servicebus.windows.net'
        - id: entityPath
          type:
            - string
          description: "Chemin d’accès de l’EventHub sous la forme «\_mon-événements-hub-nom\_»"
        - id: credentials
          type:
            - ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials
          description: "Les informations d’identification du jeton AAD. Il peut prendre l’une des opérations suivantes\_: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials."
        - id: options
          type:
            - '@azure/event-hubs.ClientOptionsBase'
          description: Les options qui peuvent être fournies lors de la création du client.
          optional: true
      return:
        type:
          - '@azure/event-hubs.EventHubClient'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createFromConnectionString'
    name: 'createFromConnectionString(string, undefined | string, ClientOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Crée un EventHub Client à partir de la chaîne de connexion.
    syntax:
      content: 'static function createFromConnectionString(connectionString: string, path?: undefined | string, options?: ClientOptions)'
      parameters:
        - id: connectionString
          type:
            - string
          description: "Chaîne de connexion sous la forme «\_Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/\_; SharedAccessKeyName = my-SA-name\_; SharedAccessKey = my-SA-key'"
        - id: path
          type:
            - undefined | string
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/event-hubs.ClientOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/event-hubs.EventHubClient'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createFromIotHubConnectionString'
    name: 'createFromIotHubConnectionString(string, ClientOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Crée un EventHub Client à partir de la chaîne de connexion.
    syntax:
      content: 'static function createFromIotHubConnectionString(iothubConnectionString: string, options?: ClientOptions)'
      parameters:
        - id: iothubConnectionString
          type:
            - string
          description: "Chaîne de connexion sous la forme «\_nom d’hôte = iot-nom d’hôte\_; SharedAccessKeyName = my-SA-name\_; SharedAccessKey = my-SA-key'"
        - id: options
          type:
            - '@azure/event-hubs.ClientOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.EventHubClient>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createFromTokenProvider'
    name: 'createFromTokenProvider(string, string, TokenProvider, ClientOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Crée un EventHub Client à partir d’un fournisseur de jetons générique.
    syntax:
      content: 'static function createFromTokenProvider(host: string, entityPath: string, tokenProvider: TokenProvider, options?: ClientOptionsBase)'
      parameters:
        - id: host
          type:
            - string
          description: 'Nom de domaine complet pour Event Hubs. Vraisemblablement, <yournamespace>. servicebus.windows.net'
        - id: entityPath
          type:
            - string
          description: "Chemin d’accès de l’EventHub sous la forme «\_mon-événements-hub-nom\_»"
        - id: tokenProvider
          type:
            - TokenProvider
          description: Votre fournisseur de jetons qui implémente l’interface TokenProvider.
        - id: options
          type:
            - '@azure/event-hubs.ClientOptionsBase'
          description: Les options qui peuvent être fournies lors de la création du client.
          optional: true
      return:
        type:
          - '@azure/event-hubs.EventHubClient'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.constructor'
    name: 'EventHubClient(EventHubConnectionConfig, ClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Instancie un client qui pointe vers le concentrateur d’événements donné par cette configuration.
    syntax:
      content: 'new EventHubClient(config: EventHubConnectionConfig, options?: ClientOptions)'
      parameters:
        - id: config
          type:
            - EventHubConnectionConfig
          description: La configuration de la connexion pour créer le EventHub Client.
        - id: options
          type:
            - '@azure/event-hubs.ClientOptions'
          description: |
            Les paramètres facultatifs qui peuvent être fournies au constructeur Client de EventHub.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.eventhubName'
    name: eventhubName
    fullName: eventhubName
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} eventhubName le nom de l’Eventhub.'
    syntax:
      content: 'eventhubName: string'
      return:
        type:
          - string
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.getHubRuntimeInformation'
    name: getHubRuntimeInformation()
    children: []
    type: method
    langs:
      - typeScript
    summary: Fournit les informations de runtime eventhub.
    syntax:
      content: function getHubRuntimeInformation()
      parameters: []
      return:
        type:
          - Promise<@azure/event-hubs.EventHubRuntimeInformation>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.getPartitionIds'
    name: getPartitionIds()
    children: []
    type: method
    langs:
      - typeScript
    summary: Fournit un tableau de partitionIds.
    syntax:
      content: function getPartitionIds()
      parameters: []
      return:
        type:
          - Promise<Array<string>>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.getPartitionInformation'
    name: getPartitionInformation(string | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fournit des informations sur la partition spécifiée.
    syntax:
      content: 'function getPartitionInformation(partitionId: string | number)'
      parameters:
        - id: partitionId
          type:
            - string | number
          description: ID de partition pour la partition dans laquelle les informations sont requises.
      return:
        type:
          - Promise<@azure/event-hubs.EventHubPartitionRuntimeInformation>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.receive'
    name: 'receive(string | number, OnMessage, OnError, ReceiveOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Démarre le récepteur en établissant une session AMQP et un lien du récepteur AMQP sur la session. Messages seront passés au gestionnaire onMessage fourni et erreur est passée au gestionnaire onError fourni.
    syntax:
      content: 'function receive(partitionId: string | number, onMessage: OnMessage, onError: OnError, options?: ReceiveOptions)'
      parameters:
        - id: partitionId
          type:
            - string | number
          description: ID de partition de réception.
        - id: onMessage
          type:
            - '@azure/event-hubs.OnMessage'
          description: Le Gestionnaire de messages pour recevoir des objets de données d’événement.
        - id: onError
          type:
            - '@azure/event-hubs.OnError'
          description: Le Gestionnaire d’erreurs pour recevoir une erreur se produit lors de la réception des messages.
        - id: options
          type:
            - '@azure/event-hubs.ReceiveOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/event-hubs.ReceiveHandler'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.receiveBatch'
    name: 'receiveBatch(string | number, number, undefined | number, ReceiveOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Reçoit un lot d’objets EventData à partir d’une partition EventHub pour un nombre donné et un maximum de donnée temps d’attente en secondes, selon ce qui se produit en premier. Cette méthode peut être utilisée directement après la création de l’objet de récepteur et **ne doit pas** être utilisé avec le `start()` (méthode).'
    syntax:
      content: 'function receiveBatch(partitionId: string | number, maxMessageCount: number, maxWaitTimeInSeconds?: undefined | number, options?: ReceiveOptions)'
      parameters:
        - id: partitionId
          type:
            - string | number
          description: ID de partition de réception.
        - id: maxMessageCount
          type:
            - number
          description: Le nombre maximal de messages. Doit être une valeur supérieure à 0.
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/event-hubs.ReceiveOptions'
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/event-hubs.EventData[]>'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.send'
    name: 'send(EventData, string | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Envoie le message donné à l’EventHub.
    syntax:
      content: 'function send(data: EventData, partitionId?: string | number)'
      parameters:
        - id: data
          type:
            - '@azure/event-hubs.EventData'
          description: Message à envoyer.  Sera envoyé en tant que chaîne JSON encodée en UTF-8.
        - id: partitionId
          type:
            - string | number
          description: ''
          optional: true
      return:
        type:
          - Promise<Delivery>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.sendBatch'
    name: 'sendBatch(EventData[], string | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Envoyer un lot de EventData à l’EventHub. Le «\_message_annotations\_», «\_application_properties\_» et «\_propriétés\_» du premier message définira que celle de l’enveloppe (message de traitement par lot)."
    syntax:
      content: 'function sendBatch(datas: EventData[], partitionId?: string | number)'
      parameters:
        - id: datas
          type:
            - '@azure/event-hubs.EventData[]'
          description: Tableau d’objets EventData à envoyer dans un lot de messages.
        - id: partitionId
          type:
            - string | number
          description: ''
          optional: true
      return:
        type:
          - Promise<Delivery>
    package: '@azure/event-hubs'
references:
  - uid: '@azure/event-hubs.ClientOptions'
    name: ClientOptions
    spec.typeScript:
      - name: ClientOptions
        fullName: ClientOptions
        uid: '@azure/event-hubs.ClientOptions'
  - uid: Promise<@azure/event-hubs.EventHubRuntimeInformation>
    name: EventHubRuntimeInformation>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubRuntimeInformation
        fullName: EventHubRuntimeInformation
        uid: '@azure/event-hubs.EventHubRuntimeInformation'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/event-hubs.EventHubPartitionRuntimeInformation>
    name: EventHubPartitionRuntimeInformation>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubPartitionRuntimeInformation
        fullName: EventHubPartitionRuntimeInformation
        uid: '@azure/event-hubs.EventHubPartitionRuntimeInformation'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/event-hubs.OnMessage'
  - uid: '@azure/event-hubs.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/event-hubs.OnError'
  - uid: '@azure/event-hubs.ReceiveOptions'
    name: ReceiveOptions
    spec.typeScript:
      - name: ReceiveOptions
        fullName: ReceiveOptions
        uid: '@azure/event-hubs.ReceiveOptions'
  - uid: '@azure/event-hubs.ReceiveHandler'
    name: ReceiveHandler
    spec.typeScript:
      - name: ReceiveHandler
        fullName: ReceiveHandler
        uid: '@azure/event-hubs.ReceiveHandler'
  - uid: 'Promise<@azure/event-hubs.EventData[]>'
    name: 'EventData[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventData
        fullName: EventData
        uid: '@azure/event-hubs.EventData'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/event-hubs.EventData'
    name: EventData
    spec.typeScript:
      - name: EventData
        fullName: EventData
        uid: '@azure/event-hubs.EventData'
  - uid: '@azure/event-hubs.EventData[]'
    name: 'EventData[]'
    spec.typeScript:
      - name: EventData
        fullName: EventData
        uid: '@azure/event-hubs.EventData'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/event-hubs.ClientOptionsBase'
    name: ClientOptionsBase
    spec.typeScript:
      - name: ClientOptionsBase
        fullName: ClientOptionsBase
        uid: '@azure/event-hubs.ClientOptionsBase'
  - uid: '@azure/event-hubs.EventHubClient'
    name: EventHubClient
    spec.typeScript:
      - name: EventHubClient
        fullName: EventHubClient
        uid: '@azure/event-hubs.EventHubClient'
  - uid: Promise<@azure/event-hubs.EventHubClient>
    name: EventHubClient>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubClient
        fullName: EventHubClient
        uid: '@azure/event-hubs.EventHubClient'
      - name: '>'
        fullName: '>'