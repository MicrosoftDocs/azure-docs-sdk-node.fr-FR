### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-secrets.SecretsClient'
    name: SecretsClient
    fullName: SecretsClient
    children:
      - '@azure/keyvault-secrets.SecretsClient.backupSecret'
      - '@azure/keyvault-secrets.SecretsClient.deleteSecret'
      - '@azure/keyvault-secrets.SecretsClient.getDefaultPipeline'
      - '@azure/keyvault-secrets.SecretsClient.getDeletedSecret'
      - '@azure/keyvault-secrets.SecretsClient.getSecret'
      - '@azure/keyvault-secrets.SecretsClient.listDeletedSecrets'
      - '@azure/keyvault-secrets.SecretsClient.listSecrets'
      - '@azure/keyvault-secrets.SecretsClient.listSecretVersions'
      - '@azure/keyvault-secrets.SecretsClient.pipeline'
      - '@azure/keyvault-secrets.SecretsClient.purgeDeletedSecret'
      - '@azure/keyvault-secrets.SecretsClient.recoverDeletedSecret'
      - '@azure/keyvault-secrets.SecretsClient.restoreSecret'
      - '@azure/keyvault-secrets.SecretsClient.constructor'
      - '@azure/keyvault-secrets.SecretsClient.setSecret'
      - '@azure/keyvault-secrets.SecretsClient.updateSecretAttributes'
      - '@azure/keyvault-secrets.SecretsClient.vaultBaseUrl'
    langs:
      - typeScript
    type: class
    summary: Le client pour interagir avec les fonctionnalités de secrets de coffre de clés
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.backupSecret'
    name: 'backupSecret(string, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Demande qu’une sauvegarde du secret spécifié soit téléchargé vers le client. Toutes les versions de la clé secrète seront téléchargées. Cette opération nécessite l’autorisation secrets/de sauvegarde.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nlet backupResult = await client.backupSecret(\"MySecretName\");\n```"
    syntax:
      content: 'function backupSecret(secretName: string, options?: RequestOptionsBase)'
      parameters:
        - id: secretName
          type:
            - string
          description: Nom du secret.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Uint8Array>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.deleteSecret'
    name: 'deleteSecret(string, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération de suppression s’applique à toute clé secrète stockée dans Azure Key Vault. DELETE ne peut pas être appliqué à une version spécifique d’une clé secrète. Cette opération nécessite l’autorisation secrets/delete.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nawait client.deleteSecret(\"MySecretName\");\n```"
    syntax:
      content: 'function deleteSecret(secretName: string, options?: RequestOptionsBase)'
      parameters:
        - id: secretName
          type:
            - string
          description: Nom du secret.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.DeletedSecret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.getDefaultPipeline'
    name: 'getDefaultPipeline(ServiceClientCredentials | TokenCredential, NewPipelineOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Une méthode statique utilisée pour créer un nouvel objet de Pipeline avec les informations d’identification fournies.
    syntax:
      content: 'static function getDefaultPipeline(credential: ServiceClientCredentials | TokenCredential, pipelineOptions?: NewPipelineOptions)'
      parameters:
        - id: credential
          type:
            - ServiceClientCredentials | TokenCredential
          description: ''
        - id: pipelineOptions
          type:
            - '@azure/keyvault-secrets.NewPipelineOptions'
          description: ''
          optional: true
      return:
        type:
          - ServiceClientOptions
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.getDeletedSecret'
    name: 'getDeletedSecret(string, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération obtenir le Secret supprimés retourne le secret spécifié supprimé, ainsi que ses attributs.\nCette opération nécessite l’autorisation secrets/get.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nawait client.getDeletedSecret(\"MyDeletedSecret\");\n```"
    syntax:
      content: 'function getDeletedSecret(secretName: string, options?: RequestOptionsBase)'
      parameters:
        - id: secretName
          type:
            - string
          description: Nom du secret.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.DeletedSecret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.getSecret'
    name: 'getSecret(string, GetSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération GET s’applique à toute clé secrète stockée dans Azure Key Vault. Cette opération nécessite l’autorisation secrets/get.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nlet secret = await client.getSecret(\"MySecretName\");\n```"
    syntax:
      content: 'function getSecret(secretName: string, options?: GetSecretOptions)'
      parameters:
        - id: secretName
          type:
            - string
          description: Nom du secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.GetSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.Secret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.listDeletedSecrets'
    name: listDeletedSecrets(GetSecretsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: "Itère les secrets supprimés dans le coffre.  L’identificateur de clé secrète complète et les attributs sont fournies dans la réponse. Aucune valeur n’est retournées pour les clés secrètes. Cette opération nécessite l’autorisation secrets/list.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nfor await (const secretAttr of client.listDeletedSecrets()) {\n  const deletedSecret = await client.getSecret(secretAttr.name);\n  console.log(\"deleted secret: \", deletedSecret);\n}\n```"
    syntax:
      content: 'function listDeletedSecrets(options?: GetSecretsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-secrets.GetSecretsOptions'
          description: ''
          optional: true
      return:
        type:
          - 'PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretAttributes, @azure/keyvault-secrets.SecretAttributes[]>'
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.listSecrets'
    name: listSecrets(GetSecretsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: "Effectue une itération de la dernière version de tous les secrets dans le coffre.  L’identificateur de clé secrète complète et les attributs sont fournies dans la réponse. Aucune valeur n’est retournées pour les clés secrètes. Cette opération nécessite l’autorisation secrets/list.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nfor await (const secretAttr of client.listSecrets()) {\n  const secret = await client.getSecret(secretAttr.name);\n  console.log(\"secret: \", secret);\n}\n```"
    syntax:
      content: 'function listSecrets(options?: GetSecretsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-secrets.GetSecretsOptions'
          description: ''
          optional: true
      return:
        type:
          - 'PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretAttributes, @azure/keyvault-secrets.SecretAttributes[]>'
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.listSecretVersions'
    name: 'listSecretVersions(string, GetSecretsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Effectue une itération de toutes les versions de la clé secrète donnée dans le coffre. L’identificateur de clé secrète complète et les attributs sont fournies dans la réponse. Aucune valeur n’est retournées pour les clés secrètes. Cette opération nécessite l’autorisation secrets/list.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nfor await (const secretAttr of client.listSecretVersions(\"MySecretName\")) {\n  const secret = await client.getSecret(secretAttr.name);\n  console.log(\"secret version: \", secret);\n}\n```"
    syntax:
      content: 'function listSecretVersions(secretName: string, options?: GetSecretsOptions)'
      parameters:
        - id: secretName
          type:
            - string
          description: Nom de la clé secrète pour extraire les versions pour
        - id: options
          type:
            - '@azure/keyvault-secrets.GetSecretsOptions'
          description: ''
          optional: true
      return:
        type:
          - 'PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretAttributes, @azure/keyvault-secrets.SecretAttributes[]>'
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.pipeline'
    name: pipeline
    fullName: pipeline
    children: []
    langs:
      - typeScript
    type: property
    summary: Les options pour créer la connexion au service
    syntax:
      content: 'pipeline: ServiceClientOptions'
      return:
        type:
          - ServiceClientOptions
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.purgeDeletedSecret'
    name: 'purgeDeletedSecret(string, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération de secret de vidage supprimé supprime définitivement, le secret sans possibilité de récupération. Cette opération peut uniquement être activée sur un coffre de suppression réversible est activé. Cette opération nécessite l’autorisation secrets/purge.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nawait client.deleteSecret(\"MySecretName\");\nawait client.purgeDeletedSecret(\"MySecretName\");\n```"
    syntax:
      content: 'function purgeDeletedSecret(secretName: string, options?: RequestOptionsBase)'
      parameters:
        - id: secretName
          type:
            - string
          description: Nom du secret.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.recoverDeletedSecret'
    name: 'recoverDeletedSecret(string, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Récupère la clé secrète supprimée dans le coffre spécifié. Cette opération peut uniquement être effectuée sur un coffre de suppression réversible est activé. Cette opération nécessite l’autorisation secrets/restauration.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nawait client.deleteSecret(\"MySecretName\");\nawait client.recoverDeletedSecret(\"MySecretName\");\n```"
    syntax:
      content: 'function recoverDeletedSecret(secretName: string, options?: RequestOptionsBase)'
      parameters:
        - id: secretName
          type:
            - string
          description: Le nom de la clé secrète supprimé.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.Secret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.restoreSecret'
    name: 'restoreSecret(Uint8Array, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Restaure un secret sauvegardé et toutes ses versions, dans un coffre. Cette opération nécessite l’autorisation secrets/restauration.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nlet mySecretBundle = await client.backupSecret(\"MySecretName\");\n// ...\nawait client.restoreSecret(mySecretBundle);\n```"
    syntax:
      content: 'function restoreSecret(secretBundleBackup: Uint8Array, options?: RequestOptionsBase)'
      parameters:
        - id: secretBundleBackup
          type:
            - Uint8Array
          description: L’objets blob de sauvegarde associé à un regroupement de secret.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.Secret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.constructor'
    name: 'SecretsClient(string, ServiceClientCredentials | TokenCredential, ServiceClientOptions | NewPipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: "Crée une instance de SecretsClient.\nExemple d’utilisation\_:\n```ts\nimport { SecretsClient } from \"@azure/keyvault-secrets\";\nimport { EnvironmentCredential } from \"@azure/identity\";\n\nlet url = `https://<MY KEYVAULT HERE>.vault.azure.net`;\nlet credentials = new EnvironmentCredential();\n\nlet client = new SecretsClient(url, credentials);\n```"
    syntax:
      content: 'new SecretsClient(url: string, credential: ServiceClientCredentials | TokenCredential, pipelineOrOptions?: ServiceClientOptions | NewPipelineOptions)'
      parameters:
        - id: url
          type:
            - string
          description: l’url de base pour le coffre de clés.
        - id: credential
          type:
            - ServiceClientCredentials | TokenCredential
          description: ''
        - id: pipelineOrOptions
          type:
            - ServiceClientOptions | @azure/keyvault-secrets.NewPipelineOptions
          description: ''
          optional: true
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.setSecret'
    name: 'setSecret(string, string, SetSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération de définition ajoute une clé secrète à Azure Key Vault. Si la clé secrète nommée existe déjà, Azure Key Vault en crée une nouvelle version de cette clé secrète. Cette opération nécessite l’autorisation secrets/set.\nExemple d’utilisation\_:\n```ts\nlet client = new SecretsClient(url, credentials);\nawait client.setSecret(\"MySecretName\", \"ABC123\");\n```"
    syntax:
      content: 'function setSecret(secretName: string, value: string, options?: SetSecretOptions)'
      parameters:
        - id: secretName
          type:
            - string
          description: Nom du secret.
        - id: value
          type:
            - string
          description: La valeur de la clé secrète.
        - id: options
          type:
            - '@azure/keyvault-secrets.SetSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.Secret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.updateSecretAttributes'
    name: 'updateSecretAttributes(string, string, UpdateSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération UPDATE modifie des attributs spécifiés d’une clé secrète stockée existante. Attributs qui ne sont pas spécifiés dans la demande sont laissés inchangées. La valeur d’une clé secrète elle-même ne peut pas être modifiée. Cette opération nécessite l’autorisation secrets/set.\nExemple d’utilisation\_:\n```ts\nlet secretName = \"MySecretName\";\nlet client = new SecretsClient(url, credentials);\nlet secret = await client.getSecret(secretName);\nawait client.updateSecret(secretName, secret.version, { enabled: false });\n```"
    syntax:
      content: 'function updateSecretAttributes(secretName: string, secretVersion: string, options?: UpdateSecretOptions)'
      parameters:
        - id: secretName
          type:
            - string
          description: Nom du secret.
        - id: secretVersion
          type:
            - string
          description: La version de la clé secrète.
        - id: options
          type:
            - '@azure/keyvault-secrets.UpdateSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.Secret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.vaultBaseUrl'
    name: vaultBaseUrl
    fullName: vaultBaseUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: L’URL de base dans le coffre
    syntax:
      content: 'vaultBaseUrl: string'
      return:
        type:
          - string
    package: '@azure/keyvault-secrets'
references:
  - uid: ServiceClientOptions | @azure/keyvault-secrets.NewPipelineOptions
    name: NewPipelineOptions
    spec.typeScript:
      - name: 'ServiceClientOptions | '
        fullName: 'ServiceClientOptions | '
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/keyvault-secrets.NewPipelineOptions'
  - uid: Promise<@azure/keyvault-secrets.DeletedSecret>
    name: DeletedSecret>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DeletedSecret
        fullName: DeletedSecret
        uid: '@azure/keyvault-secrets.DeletedSecret'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.GetSecretOptions'
    name: GetSecretOptions
    spec.typeScript:
      - name: GetSecretOptions
        fullName: GetSecretOptions
        uid: '@azure/keyvault-secrets.GetSecretOptions'
  - uid: Promise<@azure/keyvault-secrets.Secret>
    name: Secret>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Secret
        fullName: Secret
        uid: '@azure/keyvault-secrets.Secret'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.GetSecretsOptions'
    name: GetSecretsOptions
    spec.typeScript:
      - name: GetSecretsOptions
        fullName: GetSecretsOptions
        uid: '@azure/keyvault-secrets.GetSecretsOptions'
  - uid: 'PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretAttributes, @azure/keyvault-secrets.SecretAttributes[]>'
    name: 'SecretAttributes[]>'
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: SecretAttributes
        fullName: SecretAttributes
        uid: '@azure/keyvault-secrets.SecretAttributes'
      - name: ', '
        fullName: ', '
      - name: SecretAttributes
        fullName: SecretAttributes
        uid: '@azure/keyvault-secrets.SecretAttributes'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/keyvault-secrets.SetSecretOptions'
    name: SetSecretOptions
    spec.typeScript:
      - name: SetSecretOptions
        fullName: SetSecretOptions
        uid: '@azure/keyvault-secrets.SetSecretOptions'
  - uid: '@azure/keyvault-secrets.UpdateSecretOptions'
    name: UpdateSecretOptions
    spec.typeScript:
      - name: UpdateSecretOptions
        fullName: UpdateSecretOptions
        uid: '@azure/keyvault-secrets.UpdateSecretOptions'
  - uid: '@azure/keyvault-secrets.NewPipelineOptions'
    name: NewPipelineOptions
    spec.typeScript:
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/keyvault-secrets.NewPipelineOptions'