### YamlMime:UniversalReference
ms.openlocfilehash: ed7f92526f273477e153fad3fe0ab03db0704f34
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 12/13/2018
ms.locfileid: "52104224"
items:
- uid: '@azure/event-processor-host.LeaseManager'
  name: LeaseManager
  fullName: LeaseManager
  children:
  - '@azure/event-processor-host.LeaseManager.acquireLease'
  - '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  - '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  - '@azure/event-processor-host.LeaseManager.deleteLease'
  - '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  - '@azure/event-processor-host.LeaseManager.getAllLeases'
  - '@azure/event-processor-host.LeaseManager.getLease'
  - '@azure/event-processor-host.LeaseManager.leaseDuration'
  - '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  - '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  - '@azure/event-processor-host.LeaseManager.releaseLease'
  - '@azure/event-processor-host.LeaseManager.renewLease'
  - '@azure/event-processor-host.LeaseManager.updateLease'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.acquireLease'
  name: acquireLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Acquérir le bail sur la partition de votre choix pour ce EventProcessorHost.

    Notez qu’il est permis d’acquérir un bail qui est déjà détenu par un autre hôte.

    Vol de bail est comment les partitions sont redistribuées lorsque des hôtes supplémentaires sont démarrés.


    L’implémentation de stockage Azure existante peut rencontrer des concurrences entre deux instances de l’hôte tente d’acquérir ou de voler le bail en même temps. Pour éviter les situations où deux instances d’hôte à la fois croire qu’ils sont propriétaires du bail, l’acquisition peut échouer sans erreurs en retournant la valeur false et doit faire lorsqu’il existe un doute--le pire qui peut se produire est qu’aucune instance de l’hôte ne détenteur du bail pendant une courte période. Cela diffère qualitative, par exemple, le magasin sous-jacent lever une exception d’accès, qui est une erreur.
  syntax:
    content: 'function acquireLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: Informations pour la partition de votre choix comme précédemment obtenue à partir de bail `getLease()`.
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  name: createAllLeasesIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: Créer dans le magasin les informations de bail pour la partition donnée, si elle n’existe pas. Ne rien faire s’il existe déjà dans le magasin.
  syntax:
    content: 'function createAllLeasesIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: ID des partitions à créer les informations de bail pour
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  name: createLeaseStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: Créer le magasin de bail s’il n’existe pas. Ne rien faire s’il existe.
  syntax:
    content: function createLeaseStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLease'
  name: deleteLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: Supprimer les informations de bail pour la partition donnée à partir du magasin. S’il n’existe aucun bail stockée pour la partition donnée, qui est considéré comme un succès.
  syntax:
    content: 'function deleteLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: Informations pour la partition de votre choix comme précédemment obtenue à partir de bail `getLease()`.
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  name: deleteLeaseStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: Supprimer le magasin de bail.
  syntax:
    content: function deleteLeaseStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getAllLeases'
  name: getAllLeases()
  children: []
  type: method
  langs:
  - typeScript
  summary: Retourne un léger BaseLease pour tous les baux, qui inclut le nom du propriétaire d’hôte et indique si le bail a expiré. Une implémentation est libre de renvoyer CompleteLease ou sa propre classe dérivée de CompleteLease, mais il est important que getAllLeases exécuter aussi rapidement que possible. Si elle est plus rapide pour obtenir uniquement les informations requises pour un BaseLease, nous vous recommandons fortement de faisant.
  syntax:
    content: function getAllLeases()
    parameters: []
    return:
      type:
      - Promise<@azure/event-processor-host.BaseLease[]>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getLease'
  name: getLease(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: Obtient les informations de bail pour la partition spécifiée. Peut retourner `undefined` si aucun bail n’a été créé dans le magasin pour la partition spécifiée.
  syntax:
    content: 'function getLease(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: Id de partition afin d’obtenir le bail pour.
    return:
      type:
      - Promise<@azure/event-processor-host.CompleteLease | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseDuration'
  name: leaseDuration
  fullName: leaseDuration
  children: []
  langs:
  - typeScript
  type: property
  summary: '{number} leaseDuration durée d’un bail **en secondes** avant son expiration, sauf si renouvelé.'
  syntax:
    content: 'leaseDuration: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  name: leaseRenewInterval
  fullName: leaseRenewInterval
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    {number} leaseRenewInterval l’intervalle de veille **en secondes** entre les analyses.


    Permet une implémentation de gestionnaire de bail indiquer à PartitionManager la fréquence à laquelle il doit analyser les baux et de les renouveler. Pour redistribuer les baux en temps voulu après un ordinateur hôte en cas d’arrêt, nous vous recommandons d’un intervalle relativement court, par exemple les dix secondes. Évidemment, il doit être inférieure à la moitié de la durée du bail, afin d’éviter une expiration accidentelle.
  syntax:
    content: 'leaseRenewInterval: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  name: leaseStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: Le magasin de bail existe ?
  syntax:
    content: function leaseStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.releaseLease'
  name: releaseLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Abandonner un bail actuellement maintenu par cet hôte.

    Si le bail a été volé ou expiré, mettre en œuvre n’est pas nécessaire et will fail if tentée.
  syntax:
    content: 'function releaseLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: Informations pour la partition de votre choix comme précédemment obtenue à partir de bail `getLease()`.
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.renewLease'
  name: renewLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Renouveler un bail actuellement maintenu par cet hôte.

    Si le bail a été pris par une autre instance de l’hôte (volée ou après l’expiration) ou explicitement libéré, renewLease doit retourner false. Avec l’implémentation basée sur le stockage Azure, il est possible de renouveler un bail expiré qui n’a pas été pris par un autre hôte, donc votre implémentation qui autorise ou non, selon ce qui est pratique. Si elle n’est pas le cas, renewLease doit retourner false.
  syntax:
    content: 'function renewLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: bail à renouveler.
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.updateLease'
  name: updateLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Mettre à jour le magasin avec les informations contenues dans le bail fourni.

    Il est nécessaire contenir actuellement un bail afin de mettre à jour. Si le bail a été volé, expiré ou publié, il ne peut pas être mis à jour. Les implémentations de gestionnaire de bail doivent renouveler le bail avant d’effectuer la mise à jour pour éviter l’expiration du bail pendant le processus.
  syntax:
    content: 'function updateLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: Nouvelles informations de bail à stocker.
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
references:
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: Promise<@azure/event-processor-host.BaseLease[]>
  name: BaseLease[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: BaseLease
    fullName: BaseLease
    uid: '@azure/event-processor-host.BaseLease'
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<@azure/event-processor-host.CompleteLease | undefined>
  name: CompleteLease | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
  - name: " | undefined>"
    fullName: " | undefined>"
