### YamlMime:UniversalReference
items:
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy'
    name: LROPollStrategy
    fullName: LROPollStrategy
    children:
      - '@azure/ms-rest-azure-js.LROPollStrategy.getMostRecentResponse'
      - '@azure/ms-rest-azure-js.LROPollStrategy.getOperationResponse'
      - '@azure/ms-rest-azure-js.LROPollStrategy.getOperationStatus'
      - '@azure/ms-rest-azure-js.LROPollStrategy.getPollState'
      - '@azure/ms-rest-azure-js.LROPollStrategy.getRestError'
      - '@azure/ms-rest-azure-js.LROPollStrategy.isFinalStatusAcceptable'
      - '@azure/ms-rest-azure-js.LROPollStrategy.isFinished'
      - '@azure/ms-rest-azure-js.LROPollStrategy.constructor'
      - '@azure/ms-rest-azure-js.LROPollStrategy.pollUntilFinished'
      - '@azure/ms-rest-azure-js.LROPollStrategy.sendPollRequest'
    langs:
      - typeScript
    type: class
    summary: Une opération à long terme d’interrogation de classe de base de stratégie qui doivent étendre les autres stratégies d’interrogation.
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy.getMostRecentResponse'
    name: getMostRecentResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getMostRecentResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy.getOperationResponse'
    name: getOperationResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getOperationResponse()
      parameters: []
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy.getOperationStatus'
    name: getOperationStatus()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getOperationStatus()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LongRunningOperationStates'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy.getPollState'
    name: getPollState()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getPollState()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LROPollState'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy.getRestError'
    name: getRestError()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getRestError()
      parameters: []
      return:
        type:
          - RestError
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy.isFinalStatusAcceptable'
    name: isFinalStatusAcceptable()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isFinalStatusAcceptable()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy.isFinished'
    name: isFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: Obtenir ou non LRO de cette stratégie de sondage est terminée.
    syntax:
      content: function isFinished()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy.constructor'
    name: 'LROPollStrategy(AzureServiceClient, LROPollState)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new LROPollStrategy(_azureServiceClient: AzureServiceClient, _pollState: LROPollState)'
      parameters:
        - id: _azureServiceClient
          type:
            - '@azure/ms-rest-azure-js.AzureServiceClient'
          description: ''
        - id: _pollState
          type:
            - '@azure/ms-rest-azure-js.LROPollState'
          description: ''
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy.pollUntilFinished'
    name: pollUntilFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: Envoyer des demandes d’interrogation qui vérifient l’état de la LRO jusqu'à ce qu’il est déterminé que le LRO est terminée.
    syntax:
      content: function pollUntilFinished()
      parameters: []
      return:
        type:
          - Promise<boolean>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy.sendPollRequest'
    name: sendPollRequest()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Envoyer une demande d’interrogation unique qui vérifie état du LRO et retourner la réponse. Si le LRO est terminée, aucune demande ne va être envoyée, puis la dernière réponse reçue s’affichera.'
    syntax:
      content: function sendPollRequest()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/ms-rest-azure-js'
references:
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient'
    name: AzureServiceClient
    spec.typeScript:
      - name: AzureServiceClient
        fullName: AzureServiceClient
        uid: '@azure/ms-rest-azure-js.AzureServiceClient'
  - uid: '@azure/ms-rest-azure-js.LROPollState'
    name: LROPollState
    spec.typeScript:
      - name: LROPollState
        fullName: LROPollState
        uid: '@azure/ms-rest-azure-js.LROPollState'
  - uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
    name: LongRunningOperationStates
    spec.typeScript:
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'