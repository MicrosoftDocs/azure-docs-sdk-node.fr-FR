### YamlMime:UniversalReference
items:
  - uid: '@azure/ms-rest-azure-js.LROPoller'
    name: LROPoller
    fullName: LROPoller
    children:
      - '@azure/ms-rest-azure-js.LROPoller.getInitialResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getMostRecentResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getOperationResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getOperationStatus'
      - '@azure/ms-rest-azure-js.LROPoller.getPollState'
      - '@azure/ms-rest-azure-js.LROPoller.isFinalStatusAcceptable'
      - '@azure/ms-rest-azure-js.LROPoller.isFinished'
      - '@azure/ms-rest-azure-js.LROPoller.constructor'
      - '@azure/ms-rest-azure-js.LROPoller.poll'
      - '@azure/ms-rest-azure-js.LROPoller.pollUntilFinished'
    langs:
      - typeScript
    type: class
    summary: <span data-ttu-id="9846c-101">Réponse de l’opération HTTP qui fournit des méthodes spéciales permettant d’interagir avec LROs (opérations longues).</span><span class="sxs-lookup"><span data-stu-id="9846c-101">An HTTP operation response that provides special methods for interacting with LROs (long running operations).</span></span>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getInitialResponse'
    name: getInitialResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="9846c-102">Obtenir la première réponse que le service renvoyé quand la LRO a été lancée.</span><span class="sxs-lookup"><span data-stu-id="9846c-102">Get the first response that the service sent back when the LRO was initiated.</span></span>
    syntax:
      content: function getInitialResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getMostRecentResponse'
    name: getMostRecentResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="9846c-103">Obtenir la réponse la plus récente que le service est envoyé pendant cette LRO.</span><span class="sxs-lookup"><span data-stu-id="9846c-103">Get the most recent response that the service sent back during this LRO.</span></span>
    syntax:
      content: function getMostRecentResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getOperationResponse'
    name: getOperationResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="9846c-104">Si le LRO est terminé et dans un état acceptable, puis retourner le HttpOperationResponse.</span><span class="sxs-lookup"><span data-stu-id="9846c-104">If the LRO is finished and in an acceptable state, then return the HttpOperationResponse.</span></span> <span data-ttu-id="9846c-105">Si le LRO est terminée et non dans un état acceptable, puis lève l’erreur qui a généré le LRO.</span><span class="sxs-lookup"><span data-stu-id="9846c-105">If the LRO is finished and not in an acceptable state, then throw the error that the LRO produced.</span></span>
      <span data-ttu-id="9846c-106">Si le LRO n’est pas terminée, puis revenez non défini.</span><span class="sxs-lookup"><span data-stu-id="9846c-106">If the LRO is not finished, then return undefined.</span></span>
    syntax:
      content: function getOperationResponse()
      parameters: []
      return:
        type:
          - Promise<HttpOperationResponse | undefined>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getOperationStatus'
    name: getOperationStatus()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="9846c-107">Obtenir l’état actuel de la LRO.</span><span class="sxs-lookup"><span data-stu-id="9846c-107">Get the current status of the LRO.</span></span>
    syntax:
      content: function getOperationStatus()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LongRunningOperationStates'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getPollState'
    name: getPollState()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="9846c-108">Obtenir un objet LROPollState qui peut être utilisé pour interroger cette LRO dans un contexte différent (tel que sur un autre processus ou un autre ordinateur).</span><span class="sxs-lookup"><span data-stu-id="9846c-108">Get an LROPollState object that can be used to poll this LRO in a different context (such as on a different process or a different machine).</span></span> <span data-ttu-id="9846c-109">Si le LRO n’a pas pu générer une stratégie d’interrogation LRO, cela renverra non défini.</span><span class="sxs-lookup"><span data-stu-id="9846c-109">If the LRO couldn''t produce an LRO polling strategy, then this will return undefined.</span></span>'
    syntax:
      content: function getPollState()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LROPollState | undefined'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.isFinalStatusAcceptable'
    name: isFinalStatusAcceptable()
    children: []
    type: method
    langs:
      - typeScript
    summary: "<span data-ttu-id=\"9846c-110\">Obtenir ou non le LRO est terminée et son état final est acceptable.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9846c-110\">Get whether or not the LRO is finished and its final state is acceptable.</span></span> <span data-ttu-id=\"9846c-111\">Si le LRO n’a pas fini de s’exécuter, puis non définie s’affichera.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9846c-111\">If the LRO has not finished yet, then undefined will be returned.</span></span> <span data-ttu-id=\"9846c-112\">Un état final «\_acceptable\_» est déterminé par la stratégie LRO que le service Azure utilise pour effectuer des opérations de longue durée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9846c-112\">An \"acceptable\" final state is determined by the LRO strategy that the Azure service uses to perform long running operations.</span></span>"
    syntax:
      content: function isFinalStatusAcceptable()
      parameters: []
      return:
        type:
          - boolean | undefined
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.isFinished'
    name: isFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="9846c-113">Obtenir le LRO est terminée ou non.</span><span class="sxs-lookup"><span data-stu-id="9846c-113">Get whether or not the LRO is finished.</span></span>
    syntax:
      content: function isFinished()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.constructor'
    name: 'LROPoller(LROPollStrategy | undefined, HttpOperationResponse)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="9846c-114">Créer un nouveau HttpLongRunningOperationResponse.</span><span class="sxs-lookup"><span data-stu-id="9846c-114">Create a new HttpLongRunningOperationResponse.</span></span>
    syntax:
      content: 'new LROPoller(_lroPollStrategy: LROPollStrategy | undefined, _initialResponse: HttpOperationResponse)'
      parameters:
        - id: _lroPollStrategy
          type:
            - '@azure/ms-rest-azure-js.LROPollStrategy | undefined'
          description: |
            <span data-ttu-id="9846c-115">LROPollStrategy que cette HttpLongRunningOperationResponse utilisera pour interagir avec le LRO.</span><span class="sxs-lookup"><span data-stu-id="9846c-115">The LROPollStrategy that this HttpLongRunningOperationResponse will use to interact with the LRO.</span></span>
        - id: _initialResponse
          type:
            - HttpOperationResponse
          description: ''
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.poll'
    name: poll()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="9846c-116">Envoyer une demande d’interrogation unique et renvoyer les état de la LRO.</span><span class="sxs-lookup"><span data-stu-id="9846c-116">Send a single poll request and return the LRO's state.</span></span>
    syntax:
      content: function poll()
      parameters: []
      return:
        type:
          - Promise<@azure/ms-rest-azure-js.LongRunningOperationStates>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.pollUntilFinished'
    name: pollUntilFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="9846c-117">Envoyer des demandes d’interrogation qui vérifient l’état de la LRO jusqu'à ce qu’il est déterminé que le LRO est terminée.</span><span class="sxs-lookup"><span data-stu-id="9846c-117">Send poll requests that check the LRO's status until it is determined that the LRO is finished.</span></span>
    syntax:
      content: function pollUntilFinished()
      parameters: []
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/ms-rest-azure-js'
references:
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy | undefined'
    name: LROPollStrategy | undefined
    spec.typeScript:
      - name: LROPollStrategy
        fullName: LROPollStrategy
        uid: '@azure/ms-rest-azure-js.LROPollStrategy'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
    name: LongRunningOperationStates
    spec.typeScript:
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
  - uid: '@azure/ms-rest-azure-js.LROPollState | undefined'
    name: LROPollState | undefined
    spec.typeScript:
      - name: LROPollState
        fullName: LROPollState
        uid: '@azure/ms-rest-azure-js.LROPollState'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: Promise<@azure/ms-rest-azure-js.LongRunningOperationStates>
    name: LongRunningOperationStates>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
      - name: '>'
        fullName: '>'