### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient'
    name: SpellCheckClient
    fullName: SpellCheckClient
    children:
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.credentials'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.endpoint'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendOperationRequest'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendRequest'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.constructor'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_1'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_2'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/cognitiveservices-spellcheck.SpellCheckClientContext'
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.endpoint'
    name: endpoint
    fullName: endpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'endpoint?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendOperationRequest'
    name: 'sendOperationRequest(OperationArguments, OperationSpec, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Envoyer une requête HTTP qui est remplie à l’aide de la OperationSpec fourni.
    syntax:
      content: 'function sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: Les arguments qui contiendra à partir de valeurs basé sur un modèle de demande HTTP.
        - id: operationSpec
          type:
            - OperationSpec
          description: OperationSpec à utiliser pour remplir la requête HTTP.
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            Le rappel à appeler lorsque la réponse est reçue.
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: Envoyer la requête HTTP fournie.
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.constructor'
    name: 'SpellCheckClient(ServiceClientCredentials, Models.SpellCheckClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Initialise une nouvelle instance de la classe SpellCheckClient.
    syntax:
      content: 'new SpellCheckClient(credentials: ServiceClientCredentials, options?: Models.SpellCheckClientOptions)'
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: Informations d’identification d’abonnement qui identifient l’abonnement du client.
        - id: options
          type:
            - Models.SpellCheckClientOptions
          description: ''
          optional: true
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker'
    name: 'spellChecker(string, Models.SpellCheckClientSpellCheckerOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function spellChecker(text: string, options?: Models.SpellCheckClientSpellCheckerOptionalParams)'
      parameters:
        - id: text
          type:
            - string
          description: |-
            La chaîne de texte pour rechercher les erreurs de grammaire et orthographe. La longueur combinée de la chaîne de texte, preContextText chaîne et postContextText chaîne ne peut pas dépasser 10 000 caractères.
            Vous pouvez spécifier ce paramètre dans la chaîne de requête d’une demande GET, ou dans le corps d’une requête POST. En raison de la limite de longueur de chaîne de requête, vous utiliserez généralement une demande POST, sauf si vous êtes en train d’uniquement les chaînes courtes.
        - id: options
          type:
            - Models.SpellCheckClientSpellCheckerOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SpellCheckerResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_1'
    name: 'spellChecker(string, ServiceCallback<SpellCheck>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function spellChecker(text: string, callback: ServiceCallback<SpellCheck>)'
      parameters:
        - id: text
          type:
            - string
          description: |-
            La chaîne de texte pour rechercher les erreurs de grammaire et orthographe. La longueur combinée de la chaîne de texte, preContextText chaîne et postContextText chaîne ne peut pas dépasser 10 000 caractères.
            Vous pouvez spécifier ce paramètre dans la chaîne de requête d’une demande GET, ou dans le corps d’une requête POST. En raison de la limite de longueur de chaîne de requête, vous utiliserez généralement une demande POST, sauf si vous êtes en train d’uniquement les chaînes courtes.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-spellcheck.SpellCheck>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.SpellCheckerResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_2'
    name: 'spellChecker(string, SpellCheckClientSpellCheckerOptionalParams, ServiceCallback<SpellCheck>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function spellChecker(text: string, options: SpellCheckClientSpellCheckerOptionalParams, callback: ServiceCallback<SpellCheck>)'
      parameters:
        - id: text
          type:
            - string
          description: |-
            La chaîne de texte pour rechercher les erreurs de grammaire et orthographe. La longueur combinée de la chaîne de texte, preContextText chaîne et postContextText chaîne ne peut pas dépasser 10 000 caractères.
            Vous pouvez spécifier ce paramètre dans la chaîne de requête d’une demande GET, ou dans le corps d’une requête POST. En raison de la limite de longueur de chaîne de requête, vous utiliserez généralement une demande POST, sauf si vous êtes en train d’uniquement les chaînes courtes.
        - id: options
          type:
            - '@azure/cognitiveservices-spellcheck.SpellCheckClientSpellCheckerOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-spellcheck.SpellCheck>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.SpellCheckerResponse>
    package: '@azure/cognitiveservices-spellcheck'
references:
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientContext'
    name: SpellCheckClientContext
    spec.typeScript:
      - name: SpellCheckClientContext
        fullName: SpellCheckClientContext
        uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientContext'
  - uid: ServiceCallback<@azure/cognitiveservices-spellcheck.SpellCheck>
    name: SpellCheck>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SpellCheck
        fullName: SpellCheck
        uid: '@azure/cognitiveservices-spellcheck.SpellCheck'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientSpellCheckerOptionalParams'
    name: SpellCheckClientSpellCheckerOptionalParams
    spec.typeScript:
      - name: SpellCheckClientSpellCheckerOptionalParams
        fullName: SpellCheckClientSpellCheckerOptionalParams
        uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientSpellCheckerOptionalParams'