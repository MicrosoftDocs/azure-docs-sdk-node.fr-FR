### YamlMime:UniversalReference
items:
  - uid: '@azure/batch.Task'
    name: Task
    fullName: Task
    children:
      - '@azure/batch.Task.add'
      - '@azure/batch.Task.add_1'
      - '@azure/batch.Task.add_2'
      - '@azure/batch.Task.addCollection'
      - '@azure/batch.Task.addCollection_1'
      - '@azure/batch.Task.addCollection_2'
      - '@azure/batch.Task.deleteMethod'
      - '@azure/batch.Task.deleteMethod_1'
      - '@azure/batch.Task.deleteMethod_2'
      - '@azure/batch.Task.get'
      - '@azure/batch.Task.get_1'
      - '@azure/batch.Task.get_2'
      - '@azure/batch.Task.list'
      - '@azure/batch.Task.list_1'
      - '@azure/batch.Task.list_2'
      - '@azure/batch.Task.listNext'
      - '@azure/batch.Task.listNext_1'
      - '@azure/batch.Task.listNext_2'
      - '@azure/batch.Task.listSubtasks'
      - '@azure/batch.Task.listSubtasks_1'
      - '@azure/batch.Task.listSubtasks_2'
      - '@azure/batch.Task.reactivate'
      - '@azure/batch.Task.reactivate_1'
      - '@azure/batch.Task.reactivate_2'
      - '@azure/batch.Task.constructor'
      - '@azure/batch.Task.terminate'
      - '@azure/batch.Task.terminate_1'
      - '@azure/batch.Task.terminate_2'
      - '@azure/batch.Task.update'
      - '@azure/batch.Task.update_1'
      - '@azure/batch.Task.update_2'
    langs:
      - typeScript
    type: class
    summary: Classe représentant une tâche.
    package: '@azure/batch'
  - uid: '@azure/batch.Task.add'
    name: 'add(string, TaskAddParameter, Models.TaskAddOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: La durée de vie maximale d’une tâche à partir de l’ajout à la saisie semi-automatique est de 180 jours. Si une tâche n’est pas terminée dans les 180 jours d’ajouté qu'il se termine par le service de traitement par lots et de la gauche dans l’état dans lequel il se trouvait à ce moment-là.
    syntax:
      content: 'function add(jobId: string, task: TaskAddParameter, options?: Models.TaskAddOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail auquel la tâche doit être ajoutée.
        - id: task
          type:
            - '@azure/batch.TaskAddParameter'
          description: La tâche à ajouter.
        - id: options
          type:
            - Models.TaskAddOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TaskAddResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.add_1'
    name: 'add(string, TaskAddParameter, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function add(jobId: string, task: TaskAddParameter, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail auquel la tâche doit être ajoutée.
        - id: task
          type:
            - '@azure/batch.TaskAddParameter'
          description: La tâche à ajouter.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskAddResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.add_2'
    name: 'add(string, TaskAddParameter, TaskAddOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function add(jobId: string, task: TaskAddParameter, options: TaskAddOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail auquel la tâche doit être ajoutée.
        - id: task
          type:
            - '@azure/batch.TaskAddParameter'
          description: La tâche à ajouter.
        - id: options
          type:
            - '@azure/batch.TaskAddOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskAddResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.addCollection'
    name: 'addCollection(string, TaskAddParameter[], Models.TaskAddCollectionOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Notez que chaque tâche doit avoir un ID unique. Le service Batch ne peut pas retourner les résultats pour chaque tâche dans le même ordre que les tâches ont été soumis dans cette demande. Si le serveur arrive à expiration ou la connexion est fermée lors de la demande, la demande a peut-être été partiellement ou entièrement traité, ou pas du tout. Dans ce cas, l’utilisateur doit renouveler la demande. Notez que c’est à l’utilisateur pour gérer correctement les échecs lors de l’émission de nouveau une demande. Par exemple, vous devez utiliser le même ID de tâche au cours d’une nouvelle tentative afin que si l’opération précédente a réussi, la nouvelle tentative ne crée pas de tâches supplémentaires inattendu. Si la réponse contient toutes les tâches qui n’a pas pu ajouter, un client peut réessayer la demande. Dans une nouvelle tentative, il est plus efficace pour renvoyer uniquement les tâches ayant échoué pour ajouter et omettre les tâches qui ont été ajoutées à la première tentative. La durée de vie maximale d’une tâche à partir de l’ajout à la saisie semi-automatique est de 180 jours. Si une tâche n’est pas terminée dans les 180 jours d’ajouté qu''il se termine par le service de traitement par lots et de la gauche dans l’état dans lequel il se trouvait à ce moment-là.'
    syntax:
      content: 'function addCollection(jobId: string, value: TaskAddParameter[], options?: Models.TaskAddCollectionOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail auquel la collection de tâches doit être ajoutée.
        - id: value
          type:
            - '@azure/batch.TaskAddParameter[]'
          description: 'La collection de tâches à ajouter. Le nombre maximal de tâches est 100. La taille totale sérialisée de cette collection doit être inférieure à 1 Mo. Si elle est supérieure à 1 Mo (par exemple, si chaque tâche a 100 de fichiers de ressources ou des variables d’environnement), la demande échoue avec le code ''RequestBodyTooLarge'' et doit être retentée à nouveau avec moins de tâches.'
        - id: options
          type:
            - Models.TaskAddCollectionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TaskAddCollectionResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.addCollection_1'
    name: 'addCollection(string, TaskAddParameter[], ServiceCallback<TaskAddCollectionResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addCollection(jobId: string, value: TaskAddParameter[], callback: ServiceCallback<TaskAddCollectionResult>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail auquel la collection de tâches doit être ajoutée.
        - id: value
          type:
            - '@azure/batch.TaskAddParameter[]'
          description: 'La collection de tâches à ajouter. Le nombre maximal de tâches est 100. La taille totale sérialisée de cette collection doit être inférieure à 1 Mo. Si elle est supérieure à 1 Mo (par exemple, si chaque tâche a 100 de fichiers de ressources ou des variables d’environnement), la demande échoue avec le code ''RequestBodyTooLarge'' et doit être retentée à nouveau avec moins de tâches.'
        - id: callback
          type:
            - ServiceCallback<@azure/batch.TaskAddCollectionResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskAddCollectionResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.addCollection_2'
    name: 'addCollection(string, TaskAddParameter[], TaskAddCollectionOptionalParams, ServiceCallback<TaskAddCollectionResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addCollection(jobId: string, value: TaskAddParameter[], options: TaskAddCollectionOptionalParams, callback: ServiceCallback<TaskAddCollectionResult>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail auquel la collection de tâches doit être ajoutée.
        - id: value
          type:
            - '@azure/batch.TaskAddParameter[]'
          description: 'La collection de tâches à ajouter. Le nombre maximal de tâches est 100. La taille totale sérialisée de cette collection doit être inférieure à 1 Mo. Si elle est supérieure à 1 Mo (par exemple, si chaque tâche a 100 de fichiers de ressources ou des variables d’environnement), la demande échoue avec le code ''RequestBodyTooLarge'' et doit être retentée à nouveau avec moins de tâches.'
        - id: options
          type:
            - '@azure/batch.TaskAddCollectionOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<@azure/batch.TaskAddCollectionResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskAddCollectionResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.deleteMethod'
    name: 'deleteMethod(string, string, Models.TaskDeleteMethodOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Lorsqu’une tâche est supprimée, tous les fichiers dans son répertoire sur le nœud de calcul où il a été exécuté sont également supprimés (quel que soit la durée de rétention). Pour les tâches multi-instances, l’opération de tâche de suppression s’applique simultanément à la tâche principale\_; les tâches subordonnées et leurs fichiers sont ensuite supprimées asynchrone en arrière-plan."
    syntax:
      content: 'function deleteMethod(jobId: string, taskId: string, options?: Models.TaskDeleteMethodOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail à partir de laquelle supprimer la tâche.
        - id: taskId
          type:
            - string
          description: ID de la tâche à supprimer.
        - id: options
          type:
            - Models.TaskDeleteMethodOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TaskDeleteResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.deleteMethod_1'
    name: 'deleteMethod(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(jobId: string, taskId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail à partir de laquelle supprimer la tâche.
        - id: taskId
          type:
            - string
          description: ID de la tâche à supprimer.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskDeleteResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.deleteMethod_2'
    name: 'deleteMethod(string, string, TaskDeleteMethodOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(jobId: string, taskId: string, options: TaskDeleteMethodOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail à partir de laquelle supprimer la tâche.
        - id: taskId
          type:
            - string
          description: ID de la tâche à supprimer.
        - id: options
          type:
            - '@azure/batch.TaskDeleteMethodOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskDeleteResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.get'
    name: 'get(string, string, Models.TaskGetOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Pour les tâches multi-instances, informations, telles que la valeur affinityId, executionInfo et nodeInfo reportez-vous à la tâche principale. Utilisez les tâches subordonnées de liste API pour récupérer des informations sur les tâches subordonnées.'
    syntax:
      content: 'function get(jobId: string, taskId: string, options?: Models.TaskGetOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail qui contient la tâche.
        - id: taskId
          type:
            - string
          description: L’ID de la tâche pour obtenir des informations.
        - id: options
          type:
            - Models.TaskGetOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TaskGetResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.get_1'
    name: 'get(string, string, ServiceCallback<CloudTask>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(jobId: string, taskId: string, callback: ServiceCallback<CloudTask>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail qui contient la tâche.
        - id: taskId
          type:
            - string
          description: L’ID de la tâche pour obtenir des informations.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudTask>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskGetResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.get_2'
    name: 'get(string, string, TaskGetOptionalParams, ServiceCallback<CloudTask>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(jobId: string, taskId: string, options: TaskGetOptionalParams, callback: ServiceCallback<CloudTask>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail qui contient la tâche.
        - id: taskId
          type:
            - string
          description: L’ID de la tâche pour obtenir des informations.
        - id: options
          type:
            - '@azure/batch.TaskGetOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudTask>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskGetResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.list'
    name: 'list(string, Models.TaskListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Pour les tâches multi-instances, informations, telles que la valeur affinityId, executionInfo et nodeInfo reportez-vous à la tâche principale. Utilisez les tâches subordonnées de liste API pour récupérer des informations sur les tâches subordonnées.'
    syntax:
      content: 'function list(jobId: string, options?: Models.TaskListOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail.
        - id: options
          type:
            - Models.TaskListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TaskListResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.list_1'
    name: 'list(string, ServiceCallback<CloudTaskListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(jobId: string, callback: ServiceCallback<CloudTaskListResult>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudTaskListResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskListResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.list_2'
    name: 'list(string, TaskListOptionalParams, ServiceCallback<CloudTaskListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(jobId: string, options: TaskListOptionalParams, callback: ServiceCallback<CloudTaskListResult>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail.
        - id: options
          type:
            - '@azure/batch.TaskListOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudTaskListResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskListResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.listNext'
    name: 'listNext(string, Models.TaskListNextOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Pour les tâches multi-instances, informations, telles que la valeur affinityId, executionInfo et nodeInfo reportez-vous à la tâche principale. Utilisez les tâches subordonnées de liste API pour récupérer des informations sur les tâches subordonnées.'
    syntax:
      content: 'function listNext(nextPageLink: string, options?: Models.TaskListNextOptionalParams)'
      parameters:
        - id: nextPageLink
          type:
            - string
          description: NextLink de l’appel réussi précédent à l’opération de liste.
        - id: options
          type:
            - Models.TaskListNextOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TaskListResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.listNext_1'
    name: 'listNext(string, ServiceCallback<CloudTaskListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listNext(nextPageLink: string, callback: ServiceCallback<CloudTaskListResult>)'
      parameters:
        - id: nextPageLink
          type:
            - string
          description: NextLink de l’appel réussi précédent à l’opération de liste.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudTaskListResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskListResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.listNext_2'
    name: 'listNext(string, TaskListNextOptionalParams, ServiceCallback<CloudTaskListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listNext(nextPageLink: string, options: TaskListNextOptionalParams, callback: ServiceCallback<CloudTaskListResult>)'
      parameters:
        - id: nextPageLink
          type:
            - string
          description: NextLink de l’appel réussi précédent à l’opération de liste.
        - id: options
          type:
            - '@azure/batch.TaskListNextOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudTaskListResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskListResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.listSubtasks'
    name: 'listSubtasks(string, string, Models.TaskListSubtasksOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Si la tâche n’est pas une tâche multi-instances, cela retourne une collection vide.'
    syntax:
      content: 'function listSubtasks(jobId: string, taskId: string, options?: Models.TaskListSubtasksOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail.
        - id: taskId
          type:
            - string
          description: L’ID de la tâche.
        - id: options
          type:
            - Models.TaskListSubtasksOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TaskListSubtasksResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.listSubtasks_1'
    name: 'listSubtasks(string, string, ServiceCallback<CloudTaskListSubtasksResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listSubtasks(jobId: string, taskId: string, callback: ServiceCallback<CloudTaskListSubtasksResult>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail.
        - id: taskId
          type:
            - string
          description: L’ID de la tâche.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudTaskListSubtasksResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskListSubtasksResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.listSubtasks_2'
    name: 'listSubtasks(string, string, TaskListSubtasksOptionalParams, ServiceCallback<CloudTaskListSubtasksResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listSubtasks(jobId: string, taskId: string, options: TaskListSubtasksOptionalParams, callback: ServiceCallback<CloudTaskListSubtasksResult>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail.
        - id: taskId
          type:
            - string
          description: L’ID de la tâche.
        - id: options
          type:
            - '@azure/batch.TaskListSubtasksOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudTaskListSubtasksResult>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskListSubtasksResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.reactivate'
    name: 'reactivate(string, string, Models.TaskReactivateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Réactivation autorise une tâche à être de nouveau réessayé jusqu''à son nombre maximal de tentatives. État de la tâche est modifiée à l’état actif. Comme la tâche n’est plus dans l’état terminé, les informations de code ou l’échec exit précédentes ne sont plus disponibles après la réactivation. Chaque fois qu''une tâche est réactivée, son nombre de tentatives est réinitialisé à 0. Réactivation échoue pour les tâches qui ne sont pas terminées ou précédemment terminée avec succès (avec le code de sortie 0). En outre, elle échouera si la tâche est terminée (ou est arrêt ou suppression).'
    syntax:
      content: 'function reactivate(jobId: string, taskId: string, options?: Models.TaskReactivateOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail contenant la tâche.
        - id: taskId
          type:
            - string
          description: ID de la tâche à réactiver.
        - id: options
          type:
            - Models.TaskReactivateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TaskReactivateResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.reactivate_1'
    name: 'reactivate(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reactivate(jobId: string, taskId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail contenant la tâche.
        - id: taskId
          type:
            - string
          description: ID de la tâche à réactiver.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskReactivateResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.reactivate_2'
    name: 'reactivate(string, string, TaskReactivateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reactivate(jobId: string, taskId: string, options: TaskReactivateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail contenant la tâche.
        - id: taskId
          type:
            - string
          description: ID de la tâche à réactiver.
        - id: options
          type:
            - '@azure/batch.TaskReactivateOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskReactivateResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.constructor'
    name: Task(BatchServiceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Créer une tâche.
    syntax:
      content: 'new Task(client: BatchServiceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/batch.BatchServiceClientContext'
          description: |
            Référence au client du service.
    package: '@azure/batch'
  - uid: '@azure/batch.Task.terminate'
    name: 'terminate(string, string, Models.TaskTerminateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Quand la tâche a été arrêtée, il se déplace vers l’état terminé. Pour les tâches multi-instances, l’opération de tâche de fin s’applique simultanément à la tâche principale\_; tâches subordonnées sont puis interrompues de façon asynchrone en arrière-plan."
    syntax:
      content: 'function terminate(jobId: string, taskId: string, options?: Models.TaskTerminateOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail contenant la tâche.
        - id: taskId
          type:
            - string
          description: ID de la tâche ne se termine.
        - id: options
          type:
            - Models.TaskTerminateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TaskTerminateResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.terminate_1'
    name: 'terminate(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function terminate(jobId: string, taskId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail contenant la tâche.
        - id: taskId
          type:
            - string
          description: ID de la tâche ne se termine.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskTerminateResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.terminate_2'
    name: 'terminate(string, string, TaskTerminateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function terminate(jobId: string, taskId: string, options: TaskTerminateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail contenant la tâche.
        - id: taskId
          type:
            - string
          description: ID de la tâche ne se termine.
        - id: options
          type:
            - '@azure/batch.TaskTerminateOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskTerminateResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.update'
    name: 'update(string, string, Models.TaskUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Met à jour les propriétés de la tâche spécifiée.
    syntax:
      content: 'function update(jobId: string, taskId: string, options?: Models.TaskUpdateOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail contenant la tâche.
        - id: taskId
          type:
            - string
          description: L’ID de la tâche de mise à jour.
        - id: options
          type:
            - Models.TaskUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TaskUpdateResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.update_1'
    name: 'update(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(jobId: string, taskId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail contenant la tâche.
        - id: taskId
          type:
            - string
          description: L’ID de la tâche de mise à jour.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskUpdateResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Task.update_2'
    name: 'update(string, string, TaskUpdateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(jobId: string, taskId: string, options: TaskUpdateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: ID du travail contenant la tâche.
        - id: taskId
          type:
            - string
          description: L’ID de la tâche de mise à jour.
        - id: options
          type:
            - '@azure/batch.TaskUpdateOptionalParams'
          description: Les paramètres facultatifs
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Le rappel
      return:
        type:
          - Promise<Models.TaskUpdateResponse>
    package: '@azure/batch'
references:
  - uid: '@azure/batch.BatchServiceClientContext'
    name: BatchServiceClientContext
    spec.typeScript:
      - name: BatchServiceClientContext
        fullName: BatchServiceClientContext
        uid: '@azure/batch.BatchServiceClientContext'
  - uid: '@azure/batch.TaskAddParameter'
    name: TaskAddParameter
    spec.typeScript:
      - name: TaskAddParameter
        fullName: TaskAddParameter
        uid: '@azure/batch.TaskAddParameter'
  - uid: '@azure/batch.TaskAddOptionalParams'
    name: TaskAddOptionalParams
    spec.typeScript:
      - name: TaskAddOptionalParams
        fullName: TaskAddOptionalParams
        uid: '@azure/batch.TaskAddOptionalParams'
  - uid: '@azure/batch.TaskAddParameter[]'
    name: 'TaskAddParameter[]'
    spec.typeScript:
      - name: TaskAddParameter
        fullName: TaskAddParameter
        uid: '@azure/batch.TaskAddParameter'
      - name: '[]'
        fullName: '[]'
  - uid: ServiceCallback<@azure/batch.TaskAddCollectionResult>
    name: TaskAddCollectionResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TaskAddCollectionResult
        fullName: TaskAddCollectionResult
        uid: '@azure/batch.TaskAddCollectionResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.TaskAddCollectionOptionalParams'
    name: TaskAddCollectionOptionalParams
    spec.typeScript:
      - name: TaskAddCollectionOptionalParams
        fullName: TaskAddCollectionOptionalParams
        uid: '@azure/batch.TaskAddCollectionOptionalParams'
  - uid: '@azure/batch.TaskDeleteMethodOptionalParams'
    name: TaskDeleteMethodOptionalParams
    spec.typeScript:
      - name: TaskDeleteMethodOptionalParams
        fullName: TaskDeleteMethodOptionalParams
        uid: '@azure/batch.TaskDeleteMethodOptionalParams'
  - uid: ServiceCallback<@azure/batch.CloudTask>
    name: CloudTask>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CloudTask
        fullName: CloudTask
        uid: '@azure/batch.CloudTask'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.TaskGetOptionalParams'
    name: TaskGetOptionalParams
    spec.typeScript:
      - name: TaskGetOptionalParams
        fullName: TaskGetOptionalParams
        uid: '@azure/batch.TaskGetOptionalParams'
  - uid: ServiceCallback<@azure/batch.CloudTaskListResult>
    name: CloudTaskListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CloudTaskListResult
        fullName: CloudTaskListResult
        uid: '@azure/batch.CloudTaskListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.TaskListOptionalParams'
    name: TaskListOptionalParams
    spec.typeScript:
      - name: TaskListOptionalParams
        fullName: TaskListOptionalParams
        uid: '@azure/batch.TaskListOptionalParams'
  - uid: '@azure/batch.TaskListNextOptionalParams'
    name: TaskListNextOptionalParams
    spec.typeScript:
      - name: TaskListNextOptionalParams
        fullName: TaskListNextOptionalParams
        uid: '@azure/batch.TaskListNextOptionalParams'
  - uid: ServiceCallback<@azure/batch.CloudTaskListSubtasksResult>
    name: CloudTaskListSubtasksResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CloudTaskListSubtasksResult
        fullName: CloudTaskListSubtasksResult
        uid: '@azure/batch.CloudTaskListSubtasksResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.TaskListSubtasksOptionalParams'
    name: TaskListSubtasksOptionalParams
    spec.typeScript:
      - name: TaskListSubtasksOptionalParams
        fullName: TaskListSubtasksOptionalParams
        uid: '@azure/batch.TaskListSubtasksOptionalParams'
  - uid: '@azure/batch.TaskReactivateOptionalParams'
    name: TaskReactivateOptionalParams
    spec.typeScript:
      - name: TaskReactivateOptionalParams
        fullName: TaskReactivateOptionalParams
        uid: '@azure/batch.TaskReactivateOptionalParams'
  - uid: '@azure/batch.TaskTerminateOptionalParams'
    name: TaskTerminateOptionalParams
    spec.typeScript:
      - name: TaskTerminateOptionalParams
        fullName: TaskTerminateOptionalParams
        uid: '@azure/batch.TaskTerminateOptionalParams'
  - uid: '@azure/batch.TaskUpdateOptionalParams'
    name: TaskUpdateOptionalParams
    spec.typeScript:
      - name: TaskUpdateOptionalParams
        fullName: TaskUpdateOptionalParams
        uid: '@azure/batch.TaskUpdateOptionalParams'