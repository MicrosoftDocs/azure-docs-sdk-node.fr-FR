### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-keys.KeysClient'
    name: KeysClient
    fullName: KeysClient
    children:
      - '@azure/keyvault-keys.KeysClient.backupKey'
      - '@azure/keyvault-keys.KeysClient.createEcKey'
      - '@azure/keyvault-keys.KeysClient.createKey'
      - '@azure/keyvault-keys.KeysClient.createRsaKey'
      - '@azure/keyvault-keys.KeysClient.deleteKey'
      - '@azure/keyvault-keys.KeysClient.getDefaultPipeline'
      - '@azure/keyvault-keys.KeysClient.getDeletedKey'
      - '@azure/keyvault-keys.KeysClient.getKey'
      - '@azure/keyvault-keys.KeysClient.importKey'
      - '@azure/keyvault-keys.KeysClient.constructor'
      - '@azure/keyvault-keys.KeysClient.listDeletedKeys'
      - '@azure/keyvault-keys.KeysClient.listKeys'
      - '@azure/keyvault-keys.KeysClient.listKeyVersions'
      - '@azure/keyvault-keys.KeysClient.pipeline'
      - '@azure/keyvault-keys.KeysClient.purgeDeletedKey'
      - '@azure/keyvault-keys.KeysClient.recoverDeletedKey'
      - '@azure/keyvault-keys.KeysClient.restoreKey'
      - '@azure/keyvault-keys.KeysClient.updateKey'
      - '@azure/keyvault-keys.KeysClient.vaultBaseUrl'
    langs:
      - typeScript
    type: class
    summary: Le client pour interagir avec les fonctionnalités clés de coffre de clés
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.backupKey'
    name: 'backupKey(string, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Demande qu’une sauvegarde de la clé spécifiée est téléchargé sur le client. Toutes les versions de la clé seront téléchargées. Cette opération nécessite l’autorisation keys/backup.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nlet backupContents = await client.backupKey(\"MyKey\");\n```"
    syntax:
      content: 'function backupKey(name: string, options?: RequestOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Le nom de la clé.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Uint8Array | undefined>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.createEcKey'
    name: 'createEcKey(string, CreateEcKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération de clé de création peut être utilisée pour créer n’importe quel type de clé dans Azure Key Vault. Si la clé nommée existe déjà, Azure Key Vault en crée une nouvelle version de la clé. Il nécessite l’autorisation keys/create.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nlet result = await client.createEcKey(\"MyKey\", { curve: \"P-256\" });\n```"
    syntax:
      content: 'function createEcKey(name: string, options?: CreateEcKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Le nom de la clé.
        - id: options
          type:
            - '@azure/keyvault-keys.CreateEcKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.createKey'
    name: 'createKey(string, JsonWebKeyType, CreateKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération de clé de création peut être utilisée pour créer n’importe quel type de clé dans Azure Key Vault. Si la clé nommée existe déjà, Azure Key Vault en crée une nouvelle version de la clé. Il nécessite l’autorisation keys/create.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\n// Create an elliptic-curve key:\nlet result = await client.createKey(\"MyKey\", \"EC\");\n```"
    syntax:
      content: 'function createKey(name: string, keyType: JsonWebKeyType, options?: CreateKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Le nom de la clé.
        - id: keyType
          type:
            - '@azure/keyvault-keys.JsonWebKeyType'
          description: Le type de la clé.
        - id: options
          type:
            - '@azure/keyvault-keys.CreateKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.createRsaKey'
    name: 'createRsaKey(string, CreateRsaKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération de clé de création peut être utilisée pour créer n’importe quel type de clé dans Azure Key Vault. Si la clé nommée existe déjà, Azure Key Vault en crée une nouvelle version de la clé. Il nécessite l’autorisation keys/create.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nlet result = await client.createRsaKey(\"MyKey\", { keySize: 2048 });\n```"
    syntax:
      content: 'function createRsaKey(name: string, options?: CreateRsaKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Le nom de la clé.
        - id: options
          type:
            - '@azure/keyvault-keys.CreateRsaKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.deleteKey'
    name: 'deleteKey(string, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération de suppression s’applique à toute clé stockée dans Azure Key Vault. DELETE ne peut pas être appliqué à une version spécifique d’une clé. Cette opération nécessite l’autorisation keys/delete.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nlet result = await client.deleteKey(\"MyKey\");\n```"
    syntax:
      content: 'function deleteKey(name: string, options?: RequestOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Le nom de la clé.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.DeletedKey>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.getDefaultPipeline'
    name: 'getDefaultPipeline(ServiceClientCredentials | TokenCredential, NewPipelineOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Une méthode statique utilisée pour créer un nouvel objet de Pipeline avec les informations d’identification fournies.
    syntax:
      content: 'static function getDefaultPipeline(credential: ServiceClientCredentials | TokenCredential, pipelineOptions?: NewPipelineOptions)'
      parameters:
        - id: credential
          type:
            - ServiceClientCredentials | TokenCredential
          description: ''
        - id: pipelineOptions
          type:
            - '@azure/keyvault-keys.NewPipelineOptions'
          description: ''
          optional: true
      return:
        type:
          - ServiceClientOptions
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.getDeletedKey'
    name: 'getDeletedKey(string, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération d’obtention de la clé supprimée retourne la clé spécifiée et supprimée, ainsi que ses attributs.\nCette opération nécessite l’autorisation keys/get.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nlet key = await client.getDeletedKey(\"MyDeletedKey\");\n```"
    syntax:
      content: 'function getDeletedKey(name: string, options?: RequestOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Le nom de la clé.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.DeletedKey>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.getKey'
    name: 'getKey(string, GetKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération GET s’applique à toute clé stockée dans Azure Key Vault. Cette opération nécessite l’autorisation keys/get.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nlet key = await client.getKey(\"MyKey\");\n```"
    syntax:
      content: 'function getKey(name: string, options?: GetKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Le nom de la clé.
        - id: options
          type:
            - '@azure/keyvault-keys.GetKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.importKey'
    name: 'importKey(string, JsonWebKey, ImportKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération d’importation clé peut être utilisée pour importer tout type de clé dans un coffre de clés Azure. Si la clé nommée existe déjà, Azure Key Vault en crée une nouvelle version de la clé. Cette opération nécessite l’autorisation keys/import.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\n// Key contents in myKeyContents\nlet result = await client.importKey(\"MyKey\", myKeyContents);\n```"
    syntax:
      content: 'function importKey(name: string, key: JsonWebKey, options?: ImportKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Nom de la clé importée.
        - id: key
          type:
            - '@azure/keyvault-keys.JsonWebKey'
          description: La clé web Json
        - id: options
          type:
            - '@azure/keyvault-keys.ImportKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.constructor'
    name: 'KeysClient(string, ServiceClientCredentials | TokenCredential, ServiceClientOptions | NewPipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: "Crée une instance de KeysClient.\nExemple d’utilisation\_:\n```ts\nimport { KeysClient } from \"@azure/keyvault-keys\";\nimport { EnvironmentCredential } from \"@azure/identity\";\n\nlet url = `https://<MY KEYVAULT HERE>.vault.azure.net`;\nlet credentials = new EnvironmentCredential();\n\nlet client = new KeysClient(url, credentials);\n```"
    syntax:
      content: 'new KeysClient(url: string, credential: ServiceClientCredentials | TokenCredential, pipelineOrOptions?: ServiceClientOptions | NewPipelineOptions)'
      parameters:
        - id: url
          type:
            - string
          description: l’url de base pour le coffre de clés.
        - id: credential
          type:
            - ServiceClientCredentials | TokenCredential
          description: ''
        - id: pipelineOrOptions
          type:
            - ServiceClientOptions | @azure/keyvault-keys.NewPipelineOptions
          description: ''
          optional: true
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.listDeletedKeys'
    name: listDeletedKeys(GetKeysOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: "Itère les clés supprimées dans le coffre.  L’identificateur de clé complète et les attributs sont mentionnées dans la réponse. Aucune valeur n’est renvoyés pour les clés. Cette opération nécessite l’autorisation keys/list.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nfor await (const keyAttr of client.listDeletedKeys()) {\n  const deletedKey = await client.getKey(keyAttr.name);\n  console.log(\"deleted key: \", deletedKey);\n}\n```"
    syntax:
      content: 'function listDeletedKeys(options?: GetKeysOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-keys.GetKeysOptions'
          description: ''
          optional: true
      return:
        type:
          - 'PagedAsyncIterableIterator<@azure/keyvault-keys.KeyAttributes, @azure/keyvault-keys.KeyAttributes[]>'
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.listKeys'
    name: listKeys(GetKeysOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: "Effectue une itération de la dernière version de toutes les clés dans le coffre.  L’identificateur de clé complète et les attributs sont mentionnées dans la réponse. Aucune valeur n’est renvoyés pour les clés. Cette opération nécessite l’autorisation keys/list.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nfor await (const keyAttr of client.listKeys()) {\n  const key = await client.getKey(keyAttr.name);\n  console.log(\"key: \", key);\n}\n```"
    syntax:
      content: 'function listKeys(options?: GetKeysOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-keys.GetKeysOptions'
          description: ''
          optional: true
      return:
        type:
          - 'PagedAsyncIterableIterator<@azure/keyvault-keys.KeyAttributes, @azure/keyvault-keys.KeyAttributes[]>'
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.listKeyVersions'
    name: 'listKeyVersions(string, GetKeysOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Effectue une itération de toutes les versions de la clé donnée dans le coffre. Identificateur de clé complète, des attributs et des balises sont fournis dans la réponse. Cette opération nécessite l’autorisation keys/list.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nfor await (const keyAttr of client.listKeyVersions(\"MyKey\")) {\n  const key = await client.getKey(keyAttr.name);\n  console.log(\"key version: \", key);\n}\n```"
    syntax:
      content: 'function listKeyVersions(name: string, options?: GetKeysOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Nom de la clé de récupération (FETCH) des versions pour
        - id: options
          type:
            - '@azure/keyvault-keys.GetKeysOptions'
          description: ''
          optional: true
      return:
        type:
          - 'PagedAsyncIterableIterator<@azure/keyvault-keys.KeyAttributes, @azure/keyvault-keys.KeyAttributes[]>'
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.pipeline'
    name: pipeline
    fullName: pipeline
    children: []
    langs:
      - typeScript
    type: property
    summary: Les options pour créer la connexion au service
    syntax:
      content: 'pipeline: ServiceClientOptions'
      return:
        type:
          - ServiceClientOptions
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.purgeDeletedKey'
    name: 'purgeDeletedKey(string, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération de clé de vidage supprimé supprime la clé définitivement, sans possibilité de récupération. Cette opération peut uniquement être activée sur un coffre de suppression réversible est activé. Cette opération nécessite l’autorisation de clés et de purge.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nawait client.deleteKey(\"MyKey\");\n// ...\nawait client.purgeDeletedKey(\"MyKey\");\n```"
    syntax:
      content: 'function purgeDeletedKey(name: string, options?: RequestOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Le nom de la clé.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.recoverDeletedKey'
    name: 'recoverDeletedKey(string, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Récupère la clé supprimée dans le coffre spécifié. Cette opération peut uniquement être effectuée sur un coffre de suppression réversible est activé. Cette opération nécessite l’autorisation de clés/restauration.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nawait client.deleteKey(\"MyKey\");\n// ...\nawait client.recoverDeletedKey(\"MyKey\");\n```"
    syntax:
      content: 'function recoverDeletedKey(name: string, options?: RequestOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Le nom de la clé supprimée.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.restoreKey'
    name: 'restoreKey(Uint8Array, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Restaure une clé sauvegardée et toutes ses versions, dans un coffre. Cette opération nécessite l’autorisation keys/restore.\nExemple d’utilisation\_:\n```ts\nlet client = new KeysClient(url, credentials);\nlet backupContents = await client.backupKey(\"MyKey\");\n// ...\nlet key = await client.restoreKey(backupContents);\n```"
    syntax:
      content: 'function restoreKey(backup: Uint8Array, options?: RequestOptions)'
      parameters:
        - id: backup
          type:
            - Uint8Array
          description: L’objets blob de sauvegarde associé à un groupe de clés.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.updateKey'
    name: 'updateKey(string, string, UpdateKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "L’opération UPDATE modifie des attributs spécifiés d’une clé stockée existante. Attributs qui ne sont pas spécifiés dans la demande sont laissés inchangées. La valeur d’une clé lui-même ne peut pas être modifiée. Cette opération nécessite l’autorisation de clés/set.\nExemple d’utilisation\_:\n```ts\nlet keyName = \"MyKey\";\nlet client = new KeysClient(url, credentials);\nlet key = await client.getKey(keyName);\nlet result = await client.updateKey(keyName, key.version, { enabled: false });\n```"
    syntax:
      content: 'function updateKey(name: string, keyVersion: string, options?: UpdateKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Le nom de la clé.
        - id: keyVersion
          type:
            - string
          description: La version de la clé.
        - id: options
          type:
            - '@azure/keyvault-keys.UpdateKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.vaultBaseUrl'
    name: vaultBaseUrl
    fullName: vaultBaseUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: L’URL de base dans le coffre
    syntax:
      content: 'vaultBaseUrl: string'
      return:
        type:
          - string
    package: '@azure/keyvault-keys'
references:
  - uid: ServiceClientOptions | @azure/keyvault-keys.NewPipelineOptions
    name: NewPipelineOptions
    spec.typeScript:
      - name: 'ServiceClientOptions | '
        fullName: 'ServiceClientOptions | '
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/keyvault-keys.NewPipelineOptions'
  - uid: '@azure/keyvault-keys.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/keyvault-keys.RequestOptions'
  - uid: '@azure/keyvault-keys.CreateEcKeyOptions'
    name: CreateEcKeyOptions
    spec.typeScript:
      - name: CreateEcKeyOptions
        fullName: CreateEcKeyOptions
        uid: '@azure/keyvault-keys.CreateEcKeyOptions'
  - uid: Promise<@azure/keyvault-keys.Key>
    name: Key>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Key
        fullName: Key
        uid: '@azure/keyvault-keys.Key'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.JsonWebKeyType'
    name: JsonWebKeyType
    spec.typeScript:
      - name: JsonWebKeyType
        fullName: JsonWebKeyType
        uid: '@azure/keyvault-keys.JsonWebKeyType'
  - uid: '@azure/keyvault-keys.CreateKeyOptions'
    name: CreateKeyOptions
    spec.typeScript:
      - name: CreateKeyOptions
        fullName: CreateKeyOptions
        uid: '@azure/keyvault-keys.CreateKeyOptions'
  - uid: '@azure/keyvault-keys.CreateRsaKeyOptions'
    name: CreateRsaKeyOptions
    spec.typeScript:
      - name: CreateRsaKeyOptions
        fullName: CreateRsaKeyOptions
        uid: '@azure/keyvault-keys.CreateRsaKeyOptions'
  - uid: Promise<@azure/keyvault-keys.DeletedKey>
    name: DeletedKey>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DeletedKey
        fullName: DeletedKey
        uid: '@azure/keyvault-keys.DeletedKey'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.GetKeyOptions'
    name: GetKeyOptions
    spec.typeScript:
      - name: GetKeyOptions
        fullName: GetKeyOptions
        uid: '@azure/keyvault-keys.GetKeyOptions'
  - uid: '@azure/keyvault-keys.JsonWebKey'
    name: JsonWebKey
    spec.typeScript:
      - name: JsonWebKey
        fullName: JsonWebKey
        uid: '@azure/keyvault-keys.JsonWebKey'
  - uid: '@azure/keyvault-keys.ImportKeyOptions'
    name: ImportKeyOptions
    spec.typeScript:
      - name: ImportKeyOptions
        fullName: ImportKeyOptions
        uid: '@azure/keyvault-keys.ImportKeyOptions'
  - uid: '@azure/keyvault-keys.GetKeysOptions'
    name: GetKeysOptions
    spec.typeScript:
      - name: GetKeysOptions
        fullName: GetKeysOptions
        uid: '@azure/keyvault-keys.GetKeysOptions'
  - uid: 'PagedAsyncIterableIterator<@azure/keyvault-keys.KeyAttributes, @azure/keyvault-keys.KeyAttributes[]>'
    name: 'KeyAttributes[]>'
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: KeyAttributes
        fullName: KeyAttributes
        uid: '@azure/keyvault-keys.KeyAttributes'
      - name: ', '
        fullName: ', '
      - name: KeyAttributes
        fullName: KeyAttributes
        uid: '@azure/keyvault-keys.KeyAttributes'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/keyvault-keys.UpdateKeyOptions'
    name: UpdateKeyOptions
    spec.typeScript:
      - name: UpdateKeyOptions
        fullName: UpdateKeyOptions
        uid: '@azure/keyvault-keys.UpdateKeyOptions'
  - uid: '@azure/keyvault-keys.NewPipelineOptions'
    name: NewPipelineOptions
    spec.typeScript:
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/keyvault-keys.NewPipelineOptions'