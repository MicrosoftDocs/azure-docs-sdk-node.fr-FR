### YamlMime:UniversalReference
items:
  - uid: azure-batch.TaskAddResult
    name: TaskAddResult
    fullName: TaskAddResult
    children:
      - azure-batch.TaskAddResult.error
      - azure-batch.TaskAddResult.eTag
      - azure-batch.TaskAddResult.lastModified
      - azure-batch.TaskAddResult.location
      - azure-batch.TaskAddResult.status
      - azure-batch.TaskAddResult.taskId
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-batch
  - uid: azure-batch.TaskAddResult.error
    name: error
    fullName: error
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'error?: BatchError'
      return:
        type:
          - azure-batch.BatchError
    package: azure-batch
  - uid: azure-batch.TaskAddResult.eTag
    name: eTag
    fullName: eTag
    children: []
    langs:
      - typeScript
    type: property
    summary: '<span data-ttu-id="2d8ca-101">Vous pouvez utiliser cela pour détecter si la tâche a été modifiée entre les demandes.</span><span class="sxs-lookup"><span data-stu-id="2d8ca-101">You can use this to detect whether the Task has changed between requests.</span></span> <span data-ttu-id="2d8ca-102">En particulier, vous pouvez transmettre l’ETag à l’aide d’une requête de tâche de mise à jour pour spécifier que vos modifications prennent effet uniquement si la personne a modifié la tâche en attendant.</span><span class="sxs-lookup"><span data-stu-id="2d8ca-102">In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the Job in the meantime.</span></span>'
    optional: true
    syntax:
      content: 'eTag?: string'
      return:
        type:
          - string
    package: azure-batch
  - uid: azure-batch.TaskAddResult.lastModified
    name: lastModified
    fullName: lastModified
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'lastModified?: Date'
      return:
        type:
          - Date
    package: azure-batch
  - uid: azure-batch.TaskAddResult.location
    name: location
    fullName: location
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'location?: string'
      return:
        type:
          - string
    package: azure-batch
  - uid: azure-batch.TaskAddResult.status
    name: status
    fullName: status
    children: []
    langs:
      - typeScript
    type: property
    summary: "<span data-ttu-id=\"2d8ca-103\">Les valeurs possibles sont\_: «\_réussite\_», «\_clientError\_», 'serverError'</span><span class=\"sxs-lookup\"><span data-stu-id=\"2d8ca-103\">Possible values include: 'success', 'clientError', 'serverError'</span></span>"
    syntax:
      content: 'status: string'
      return:
        type:
          - string
    package: azure-batch
  - uid: azure-batch.TaskAddResult.taskId
    name: taskId
    fullName: taskId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'taskId: string'
      return:
        type:
          - string
    package: azure-batch
references:
  - uid: azure-batch.BatchError
    name: BatchError
    spec.typeScript:
      - name: BatchError
        fullName: BatchError
        uid: azure-batch.BatchError